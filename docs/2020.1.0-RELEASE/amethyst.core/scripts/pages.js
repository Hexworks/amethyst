var pages = [{"name":"interface Attribute","description":"Attribute","location":"amethyst.core/[root]/-attribute/index.html","searchKeys":["Attribute","interface Attribute"]},{"name":"interface Attribute","description":"org.hexworks.amethyst.api.Attribute","location":"amethyst.core/org.hexworks.amethyst.api/-attribute/index.html","searchKeys":["Attribute","interface Attribute"]},{"name":"abstract val name: String","description":"Attribute.name","location":"amethyst.core/[root]/-attribute/name.html","searchKeys":["name","abstract val name: String"]},{"name":"open override val name: String","description":"Category.name","location":"amethyst.core/[root]/-category/name.html","searchKeys":["name","open override val name: String"]},{"name":"open override val name: String","description":"DependsOn.name","location":"amethyst.core/[root]/-depends-on/name.html","searchKeys":["name","open override val name: String"]},{"name":"abstract val name: String","description":"EntityType.name","location":"amethyst.core/[root]/-entity-type/name.html","searchKeys":["name","abstract val name: String"]},{"name":"open override val name: String","description":"LastUpdate.name","location":"amethyst.core/[root]/-last-update/name.html","searchKeys":["name","open override val name: String"]},{"name":"open override val name: String","description":"Processor.name","location":"amethyst.core/[root]/-processor/name.html","searchKeys":["name","open override val name: String"]},{"name":"open val name: String","description":"org.hexworks.amethyst.api.base.BaseEntity.name","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity/name.html","searchKeys":["name","open val name: String"]},{"name":"open override val name: String","description":"org.hexworks.amethyst.api.base.BaseEntityType.name","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity-type/name.html","searchKeys":["name","open override val name: String"]},{"name":"open val name: String","description":"org.hexworks.amethyst.api.entity.Entity.name","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/name.html","searchKeys":["name","open val name: String"]},{"name":"abstract val name: String","description":"org.hexworks.amethyst.api.entity.EntityType.name","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity-type/name.html","searchKeys":["name","abstract val name: String"]},{"name":"open val name: String","description":"org.hexworks.amethyst.api.entity.MutableEntity.name","location":"amethyst.core/org.hexworks.amethyst.api.entity/-mutable-entity/name.html","searchKeys":["name","open val name: String"]},{"name":"open val name: String","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.name","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/name.html","searchKeys":["name","open val name: String"]},{"name":"open override val name: String","description":"org.hexworks.amethyst.samples.StateMachineSample.MyType.name","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-my-type/name.html","searchKeys":["name","open override val name: String"]},{"name":"val name: String","description":"stress.TestAttribute.name","location":"amethyst.core/stress/-test-attribute/name.html","searchKeys":["name","val name: String"]},{"name":"open override val name: String","description":"stress.TestEntityType.name","location":"amethyst.core/stress/-test-entity-type/name.html","searchKeys":["name","open override val name: String"]},{"name":"interface Behavior<C : Context, T : EntityType<C>>","description":"Behavior","location":"amethyst.core/[root]/-behavior/index.html","searchKeys":["Behavior","interface Behavior<C : Context, T : EntityType<C>>"]},{"name":"interface Behavior<C : Context> : System<C> ","description":"org.hexworks.amethyst.api.system.Behavior","location":"amethyst.core/org.hexworks.amethyst.api.system/-behavior/index.html","searchKeys":["Behavior","interface Behavior<C : Context> : System<C> "]},{"name":"abstract suspend fun update(entity: Entity<C, T>, context: C): Boolean","description":"Behavior.update","location":"amethyst.core/[root]/-behavior/update.html","searchKeys":["update","abstract suspend fun update(entity: Entity<C, T>, context: C): Boolean"]},{"name":"fun update(currentTimeMs: Long): Job","description":"Engine.update","location":"amethyst.core/[root]/-engine/update.html","searchKeys":["update","fun update(currentTimeMs: Long): Job"]},{"name":"suspend fun update(context: C): Boolean","description":"Entity.update","location":"amethyst.core/[root]/-entity/update.html","searchKeys":["update","suspend fun update(context: C): Boolean"]},{"name":"abstract suspend fun update(context: C): Boolean","description":"org.hexworks.amethyst.api.entity.Entity.update","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/update.html","searchKeys":["update","abstract suspend fun update(context: C): Boolean"]},{"name":"abstract suspend fun update(entity: Entity<out EntityType, C>, context: C): Boolean","description":"org.hexworks.amethyst.api.system.Behavior.update","location":"amethyst.core/org.hexworks.amethyst.api.system/-behavior/update.html","searchKeys":["update","abstract suspend fun update(entity: Entity<out EntityType, C>, context: C): Boolean"]},{"name":"open suspend override fun update(context: C): Boolean","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.update","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/update.html","searchKeys":["update","open suspend override fun update(context: C): Boolean"]},{"name":"open suspend override fun update(entity: Entity<out EntityType, C>, context: C): Boolean","description":"org.hexworks.amethyst.internal.system.CompositeAndBehavior.update","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-and-behavior/update.html","searchKeys":["update","open suspend override fun update(entity: Entity<out EntityType, C>, context: C): Boolean"]},{"name":"open suspend override fun update(entity: Entity<out EntityType, C>, context: C): Boolean","description":"org.hexworks.amethyst.internal.system.CompositeOrBehavior.update","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-or-behavior/update.html","searchKeys":["update","open suspend override fun update(entity: Entity<out EntityType, C>, context: C): Boolean"]},{"name":"open suspend override fun update(entity: Entity<out EntityType, C>, context: C): Boolean","description":"stress.EngineStressTest.WaitingBehavior.update","location":"amethyst.core/stress/-engine-stress-test/-waiting-behavior/update.html","searchKeys":["update","open suspend override fun update(entity: Entity<out EntityType, C>, context: C): Boolean"]},{"name":"open suspend override fun update(entity: Entity<out EntityType, TestContext>, context: TestContext): Boolean","description":"stress.TestBehavior.update","location":"amethyst.core/stress/-test-behavior/update.html","searchKeys":["update","open suspend override fun update(entity: Entity<out EntityType, TestContext>, context: TestContext): Boolean"]},{"name":"data class Category(value: String) : Attribute","description":"Category","location":"amethyst.core/[root]/-category/index.html","searchKeys":["Category","data class Category(value: String) : Attribute"]},{"name":"fun Category(value: String)","description":"Category.Category","location":"amethyst.core/[root]/-category/-category.html","searchKeys":["Category","fun Category(value: String)"]},{"name":"operator fun component1(): String","description":"Category.component1","location":"amethyst.core/[root]/-category/component1.html","searchKeys":["component1","operator fun component1(): String"]},{"name":"operator fun component1(): List<ProcessorEntity>","description":"DependsOn.component1","location":"amethyst.core/[root]/-depends-on/component1.html","searchKeys":["component1","operator fun component1(): List<ProcessorEntity>"]},{"name":"operator fun component1(): Long","description":"LastUpdate.component1","location":"amethyst.core/[root]/-last-update/component1.html","searchKeys":["component1","operator fun component1(): Long"]},{"name":"operator fun component1(): Long","description":"ProcessorContext.component1","location":"amethyst.core/[root]/-processor-context/component1.html","searchKeys":["component1","operator fun component1(): Long"]},{"name":"operator fun component1(): Message<C>","description":"org.hexworks.amethyst.api.MessageResponse.component1","location":"amethyst.core/org.hexworks.amethyst.api/-message-response/component1.html","searchKeys":["component1","operator fun component1(): Message<C>"]},{"name":"operator fun component1(): F","description":"org.hexworks.amethyst.api.StateResponse.component1","location":"amethyst.core/org.hexworks.amethyst.api/-state-response/component1.html","searchKeys":["component1","operator fun component1(): F"]},{"name":"operator fun component1(): UUID","description":"org.hexworks.amethyst.api.attribute.EntityClock.component1","location":"amethyst.core/org.hexworks.amethyst.api.attribute/-entity-clock/component1.html","searchKeys":["component1","operator fun component1(): UUID"]},{"name":"operator fun component1(): C","description":"org.hexworks.amethyst.api.message.StateChanged.component1","location":"amethyst.core/org.hexworks.amethyst.api.message/-state-changed/component1.html","searchKeys":["component1","operator fun component1(): C"]},{"name":"operator fun component1(): StateMachineSample.MyContext","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Close.component1","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-close/component1.html","searchKeys":["component1","operator fun component1(): StateMachineSample.MyContext"]},{"name":"operator fun component1(): StateMachineSample.MyContext","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Open.component1","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-open/component1.html","searchKeys":["component1","operator fun component1(): StateMachineSample.MyContext"]},{"name":"operator fun component1(): StateMachineSample.MyContext","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Unlock.component1","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-unlock/component1.html","searchKeys":["component1","operator fun component1(): StateMachineSample.MyContext"]},{"name":"operator fun component1(): StateMachineSample.MyContext","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Closed.component1","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-closed/component1.html","searchKeys":["component1","operator fun component1(): StateMachineSample.MyContext"]},{"name":"operator fun component1(): StateMachineSample.MyContext","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Opened.component1","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-opened/component1.html","searchKeys":["component1","operator fun component1(): StateMachineSample.MyContext"]},{"name":"operator fun component1(): StateMachineSample.MyContext","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Unlocked.component1","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-unlocked/component1.html","searchKeys":["component1","operator fun component1(): StateMachineSample.MyContext"]},{"name":"operator fun component1(): Set<String>","description":"org.hexworks.amethyst.samples.StateMachineSample.HiddenInventory.component1","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-hidden-inventory/component1.html","searchKeys":["component1","operator fun component1(): Set<String>"]},{"name":"operator fun component1(): Set<String>","description":"org.hexworks.amethyst.samples.StateMachineSample.Inventory.component1","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-inventory/component1.html","searchKeys":["component1","operator fun component1(): Set<String>"]},{"name":"operator fun component1(): String","description":"stress.TestAttribute.component1","location":"amethyst.core/stress/-test-attribute/component1.html","searchKeys":["component1","operator fun component1(): String"]},{"name":"fun copy(value: String): Category","description":"Category.copy","location":"amethyst.core/[root]/-category/copy.html","searchKeys":["copy","fun copy(value: String): Category"]},{"name":"fun copy(processors: List<ProcessorEntity>): DependsOn","description":"DependsOn.copy","location":"amethyst.core/[root]/-depends-on/copy.html","searchKeys":["copy","fun copy(processors: List<ProcessorEntity>): DependsOn"]},{"name":"fun copy(lastUpdate: Long = System.currentTimeMillis()): LastUpdate","description":"LastUpdate.copy","location":"amethyst.core/[root]/-last-update/copy.html","searchKeys":["copy","fun copy(lastUpdate: Long = System.currentTimeMillis()): LastUpdate"]},{"name":"fun copy(currentTime: Long, entities: Sequence<Entity<Context, EntityType<Context>>>): ProcessorContext","description":"ProcessorContext.copy","location":"amethyst.core/[root]/-processor-context/copy.html","searchKeys":["copy","fun copy(currentTime: Long, entities: Sequence<Entity<Context, EntityType<Context>>>): ProcessorContext"]},{"name":"fun copy(message: Message<C>): MessageResponse<C>","description":"org.hexworks.amethyst.api.MessageResponse.copy","location":"amethyst.core/org.hexworks.amethyst.api/-message-response/copy.html","searchKeys":["copy","fun copy(message: Message<C>): MessageResponse<C>"]},{"name":"fun copy(facet: F): StateResponse<C, P, F>","description":"org.hexworks.amethyst.api.StateResponse.copy","location":"amethyst.core/org.hexworks.amethyst.api/-state-response/copy.html","searchKeys":["copy","fun copy(facet: F): StateResponse<C, P, F>"]},{"name":"fun copy(id: UUID, createdAt: Long = Clock.System.now().toEpochMilliseconds(), logicalTime: Long = 100): EntityClock","description":"org.hexworks.amethyst.api.attribute.EntityClock.copy","location":"amethyst.core/org.hexworks.amethyst.api.attribute/-entity-clock/copy.html","searchKeys":["copy","fun copy(id: UUID, createdAt: Long = Clock.System.now().toEpochMilliseconds(), logicalTime: Long = 100): EntityClock"]},{"name":"fun copy(context: C, source: Entity<out EntityType, C>, oldState: Facet<C, out Message<C>>, newState: Facet<C, out Message<C>>): StateChanged<C>","description":"org.hexworks.amethyst.api.message.StateChanged.copy","location":"amethyst.core/org.hexworks.amethyst.api.message/-state-changed/copy.html","searchKeys":["copy","fun copy(context: C, source: Entity<out EntityType, C>, oldState: Facet<C, out Message<C>>, newState: Facet<C, out Message<C>>): StateChanged<C>"]},{"name":"fun copy(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>): StateMachineSample.BarrierAction.Close","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Close.copy","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-close/copy.html","searchKeys":["copy","fun copy(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>): StateMachineSample.BarrierAction.Close"]},{"name":"fun copy(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>): StateMachineSample.BarrierAction.Open","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Open.copy","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-open/copy.html","searchKeys":["copy","fun copy(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>): StateMachineSample.BarrierAction.Open"]},{"name":"fun copy(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>): StateMachineSample.BarrierAction.Unlock","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Unlock.copy","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-unlock/copy.html","searchKeys":["copy","fun copy(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>): StateMachineSample.BarrierAction.Unlock"]},{"name":"fun copy(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>): StateMachineSample.BarrierStateChange.Closed","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Closed.copy","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-closed/copy.html","searchKeys":["copy","fun copy(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>): StateMachineSample.BarrierStateChange.Closed"]},{"name":"fun copy(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>): StateMachineSample.BarrierStateChange.Opened","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Opened.copy","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-opened/copy.html","searchKeys":["copy","fun copy(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>): StateMachineSample.BarrierStateChange.Opened"]},{"name":"fun copy(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>): StateMachineSample.BarrierStateChange.Unlocked","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Unlocked.copy","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-unlocked/copy.html","searchKeys":["copy","fun copy(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>): StateMachineSample.BarrierStateChange.Unlocked"]},{"name":"fun copy(items: Set<String>): StateMachineSample.HiddenInventory","description":"org.hexworks.amethyst.samples.StateMachineSample.HiddenInventory.copy","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-hidden-inventory/copy.html","searchKeys":["copy","fun copy(items: Set<String>): StateMachineSample.HiddenInventory"]},{"name":"fun copy(items: Set<String>): StateMachineSample.Inventory","description":"org.hexworks.amethyst.samples.StateMachineSample.Inventory.copy","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-inventory/copy.html","searchKeys":["copy","fun copy(items: Set<String>): StateMachineSample.Inventory"]},{"name":"fun copy(name: String, age: Int): TestAttribute","description":"stress.TestAttribute.copy","location":"amethyst.core/stress/-test-attribute/copy.html","searchKeys":["copy","fun copy(name: String, age: Int): TestAttribute"]},{"name":"val value: String","description":"Category.value","location":"amethyst.core/[root]/-category/value.html","searchKeys":["value","val value: String"]},{"name":"object CombatContext : Context","description":"CombatContext","location":"amethyst.core/[root]/-combat-context/index.html","searchKeys":["CombatContext","object CombatContext : Context"]},{"name":"data class DependsOn(processors: List<ProcessorEntity>) : Attribute","description":"DependsOn","location":"amethyst.core/[root]/-depends-on/index.html","searchKeys":["DependsOn","data class DependsOn(processors: List<ProcessorEntity>) : Attribute"]},{"name":"fun DependsOn(processors: List<ProcessorEntity>)","description":"DependsOn.DependsOn","location":"amethyst.core/[root]/-depends-on/-depends-on.html","searchKeys":["DependsOn","fun DependsOn(processors: List<ProcessorEntity>)"]},{"name":"val processors: List<ProcessorEntity>","description":"DependsOn.processors","location":"amethyst.core/[root]/-depends-on/processors.html","searchKeys":["processors","val processors: List<ProcessorEntity>"]},{"name":"class Engine(coroutineContext: CoroutineContext) : CoroutineScope","description":"Engine","location":"amethyst.core/[root]/-engine/index.html","searchKeys":["Engine","class Engine(coroutineContext: CoroutineContext) : CoroutineScope"]},{"name":"fun Engine(coroutineContext: CoroutineContext = Dispatchers.Default)","description":"Engine.Engine","location":"amethyst.core/[root]/-engine/-engine.html","searchKeys":["Engine","fun Engine(coroutineContext: CoroutineContext = Dispatchers.Default)"]},{"name":"interface Engine<T : Context>","description":"org.hexworks.amethyst.api.Engine","location":"amethyst.core/org.hexworks.amethyst.api/-engine/index.html","searchKeys":["Engine","interface Engine<T : Context>"]},{"name":"fun <C : Context, T : EntityType<C>> addEntity(entity: Entity<C, T>)","description":"Engine.addEntity","location":"amethyst.core/[root]/-engine/add-entity.html","searchKeys":["addEntity","fun <C : Context, T : EntityType<C>> addEntity(entity: Entity<C, T>)"]},{"name":"abstract fun addEntity(entity: Entity<out EntityType, T>)","description":"org.hexworks.amethyst.api.Engine.addEntity","location":"amethyst.core/org.hexworks.amethyst.api/-engine/add-entity.html","searchKeys":["addEntity","abstract fun addEntity(entity: Entity<out EntityType, T>)"]},{"name":"open override fun addEntity(entity: Entity<out EntityType, T>)","description":"org.hexworks.amethyst.internal.RealTimeEngine.addEntity","location":"amethyst.core/org.hexworks.amethyst.internal/-real-time-engine/add-entity.html","searchKeys":["addEntity","open override fun addEntity(entity: Entity<out EntityType, T>)"]},{"name":"open override fun addEntity(entity: Entity<out EntityType, T>)","description":"org.hexworks.amethyst.internal.TurnBasedEngine.addEntity","location":"amethyst.core/org.hexworks.amethyst.internal/-turn-based-engine/add-entity.html","searchKeys":["addEntity","open override fun addEntity(entity: Entity<out EntityType, T>)"]},{"name":"open override val coroutineContext: CoroutineContext","description":"Engine.coroutineContext","location":"amethyst.core/[root]/-engine/coroutine-context.html","searchKeys":["coroutineContext","open override val coroutineContext: CoroutineContext"]},{"name":"open override val coroutineContext: CoroutineContext","description":"org.hexworks.amethyst.internal.RealTimeEngine.coroutineContext","location":"amethyst.core/org.hexworks.amethyst.internal/-real-time-engine/coroutine-context.html","searchKeys":["coroutineContext","open override val coroutineContext: CoroutineContext"]},{"name":"open override val coroutineContext: CoroutineContext","description":"org.hexworks.amethyst.internal.TurnBasedEngine.coroutineContext","location":"amethyst.core/org.hexworks.amethyst.internal/-turn-based-engine/coroutine-context.html","searchKeys":["coroutineContext","open override val coroutineContext: CoroutineContext"]},{"name":"fun <C : Context, T : EntityType<C>> removeEntity(entity: Entity<C, T>)","description":"Engine.removeEntity","location":"amethyst.core/[root]/-engine/remove-entity.html","searchKeys":["removeEntity","fun <C : Context, T : EntityType<C>> removeEntity(entity: Entity<C, T>)"]},{"name":"abstract fun removeEntity(entity: Entity<out EntityType, T>)","description":"org.hexworks.amethyst.api.Engine.removeEntity","location":"amethyst.core/org.hexworks.amethyst.api/-engine/remove-entity.html","searchKeys":["removeEntity","abstract fun removeEntity(entity: Entity<out EntityType, T>)"]},{"name":"open override fun removeEntity(entity: Entity<out EntityType, T>)","description":"org.hexworks.amethyst.internal.RealTimeEngine.removeEntity","location":"amethyst.core/org.hexworks.amethyst.internal/-real-time-engine/remove-entity.html","searchKeys":["removeEntity","open override fun removeEntity(entity: Entity<out EntityType, T>)"]},{"name":"open override fun removeEntity(entity: Entity<out EntityType, T>)","description":"org.hexworks.amethyst.internal.TurnBasedEngine.removeEntity","location":"amethyst.core/org.hexworks.amethyst.internal/-turn-based-engine/remove-entity.html","searchKeys":["removeEntity","open override fun removeEntity(entity: Entity<out EntityType, T>)"]},{"name":"class Entity<C : Context, T : EntityType<C>>(type: T, contextClass: KClass<C>, attributes: Set<Attribute>, behaviors: Set<Behavior<C, T>>)","description":"Entity","location":"amethyst.core/[root]/-entity/index.html","searchKeys":["Entity","class Entity<C : Context, T : EntityType<C>>(type: T, contextClass: KClass<C>, attributes: Set<Attribute>, behaviors: Set<Behavior<C, T>>)"]},{"name":"fun <C : Context, T : EntityType<C>> Entity(type: T, contextClass: KClass<C>, attributes: Set<Attribute>, behaviors: Set<Behavior<C, T>>)","description":"Entity.Entity","location":"amethyst.core/[root]/-entity/-entity.html","searchKeys":["Entity","fun <C : Context, T : EntityType<C>> Entity(type: T, contextClass: KClass<C>, attributes: Set<Attribute>, behaviors: Set<Behavior<C, T>>)"]},{"name":"interface Entity<T : EntityType, C : Context> : AttributeAccessor, FacetAccessor<C> , BehaviorAccessor<C> ","description":"org.hexworks.amethyst.api.entity.Entity","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/index.html","searchKeys":["Entity","interface Entity<T : EntityType, C : Context> : AttributeAccessor, FacetAccessor<C> , BehaviorAccessor<C> "]},{"name":"val attributes: Set<Attribute>","description":"Entity.attributes","location":"amethyst.core/[root]/-entity/attributes.html","searchKeys":["attributes","val attributes: Set<Attribute>"]},{"name":"abstract val attributes: Sequence<Attribute>","description":"org.hexworks.amethyst.api.accessor.AttributeAccessor.attributes","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-attribute-accessor/attributes.html","searchKeys":["attributes","abstract val attributes: Sequence<Attribute>"]},{"name":"open override val attributes: Sequence<Attribute>","description":"org.hexworks.amethyst.api.base.BaseEntity.attributes","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity/attributes.html","searchKeys":["attributes","open override val attributes: Sequence<Attribute>"]},{"name":"fun attributes(vararg attributes: Attribute): EntityBuilder<T, C>","description":"org.hexworks.amethyst.api.builder.EntityBuilder.attributes","location":"amethyst.core/org.hexworks.amethyst.api.builder/-entity-builder/attributes.html","searchKeys":["attributes","fun attributes(vararg attributes: Attribute): EntityBuilder<T, C>"]},{"name":"abstract val attributes: Sequence<Attribute>","description":"org.hexworks.amethyst.api.entity.Entity.attributes","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/attributes.html","searchKeys":["attributes","abstract val attributes: Sequence<Attribute>"]},{"name":"abstract val attributes: Sequence<Attribute>","description":"org.hexworks.amethyst.api.entity.MutableEntity.attributes","location":"amethyst.core/org.hexworks.amethyst.api.entity/-mutable-entity/attributes.html","searchKeys":["attributes","abstract val attributes: Sequence<Attribute>"]},{"name":"abstract val attributes: Sequence<Attribute>","description":"org.hexworks.amethyst.api.mutator.AttributeMutator.attributes","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-attribute-mutator/attributes.html","searchKeys":["attributes","abstract val attributes: Sequence<Attribute>"]},{"name":"open override val attributes: Sequence<Attribute>","description":"org.hexworks.amethyst.internal.accessor.DefaultAttributeMutator.attributes","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-attribute-mutator/attributes.html","searchKeys":["attributes","open override val attributes: Sequence<Attribute>"]},{"name":"open override val attributes: Sequence<Attribute>","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.attributes","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/attributes.html","searchKeys":["attributes","open override val attributes: Sequence<Attribute>"]},{"name":"val behaviors: Set<Behavior<C, T>>","description":"Entity.behaviors","location":"amethyst.core/[root]/-entity/behaviors.html","searchKeys":["behaviors","val behaviors: Set<Behavior<C, T>>"]},{"name":"abstract val behaviors: Sequence<Behavior<C>>","description":"org.hexworks.amethyst.api.accessor.BehaviorAccessor.behaviors","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-behavior-accessor/behaviors.html","searchKeys":["behaviors","abstract val behaviors: Sequence<Behavior<C>>"]},{"name":"open override val behaviors: Sequence<Behavior<C>>","description":"org.hexworks.amethyst.api.base.BaseEntity.behaviors","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity/behaviors.html","searchKeys":["behaviors","open override val behaviors: Sequence<Behavior<C>>"]},{"name":"fun behaviors(vararg behaviors: Behavior<C>): EntityBuilder<T, C>","description":"org.hexworks.amethyst.api.builder.EntityBuilder.behaviors","location":"amethyst.core/org.hexworks.amethyst.api.builder/-entity-builder/behaviors.html","searchKeys":["behaviors","fun behaviors(vararg behaviors: Behavior<C>): EntityBuilder<T, C>"]},{"name":"abstract val behaviors: Sequence<Behavior<C>>","description":"org.hexworks.amethyst.api.entity.Entity.behaviors","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/behaviors.html","searchKeys":["behaviors","abstract val behaviors: Sequence<Behavior<C>>"]},{"name":"abstract val behaviors: Sequence<Behavior<C>>","description":"org.hexworks.amethyst.api.entity.MutableEntity.behaviors","location":"amethyst.core/org.hexworks.amethyst.api.entity/-mutable-entity/behaviors.html","searchKeys":["behaviors","abstract val behaviors: Sequence<Behavior<C>>"]},{"name":"abstract val behaviors: Sequence<Behavior<C>>","description":"org.hexworks.amethyst.api.mutator.BehaviorMutator.behaviors","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-behavior-mutator/behaviors.html","searchKeys":["behaviors","abstract val behaviors: Sequence<Behavior<C>>"]},{"name":"open override val behaviors: Sequence<Behavior<C>>","description":"org.hexworks.amethyst.internal.accessor.DefaultBehaviorMutator.behaviors","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-behavior-mutator/behaviors.html","searchKeys":["behaviors","open override val behaviors: Sequence<Behavior<C>>"]},{"name":"open override val behaviors: Sequence<Behavior<C>>","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.behaviors","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/behaviors.html","searchKeys":["behaviors","open override val behaviors: Sequence<Behavior<C>>"]},{"name":"val contextClass: KClass<C>","description":"Entity.contextClass","location":"amethyst.core/[root]/-entity/context-class.html","searchKeys":["contextClass","val contextClass: KClass<C>"]},{"name":"val id: UUID","description":"Entity.id","location":"amethyst.core/[root]/-entity/id.html","searchKeys":["id","val id: UUID"]},{"name":"abstract val id: UUID","description":"org.hexworks.amethyst.api.Attribute.id","location":"amethyst.core/org.hexworks.amethyst.api/-attribute/id.html","searchKeys":["id","abstract val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.api.attribute.EntityClock.id","location":"amethyst.core/org.hexworks.amethyst.api.attribute/-entity-clock/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.api.base.BaseActor.id","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-actor/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.api.base.BaseAttribute.id","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-attribute/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.api.base.BaseBehavior.id","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-behavior/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.api.base.BaseEntity.id","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.api.base.BaseEntityType.id","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity-type/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.api.base.BaseFacet.id","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-facet/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.api.base.BaseStateFacet.id","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-state-facet/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"abstract val id: UUID","description":"org.hexworks.amethyst.api.entity.Entity.id","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/id.html","searchKeys":["id","abstract val id: UUID"]},{"name":"abstract val id: UUID","description":"org.hexworks.amethyst.api.entity.EntityType.id","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity-type/id.html","searchKeys":["id","abstract val id: UUID"]},{"name":"abstract val id: UUID","description":"org.hexworks.amethyst.api.entity.MutableEntity.id","location":"amethyst.core/org.hexworks.amethyst.api.entity/-mutable-entity/id.html","searchKeys":["id","abstract val id: UUID"]},{"name":"abstract val id: UUID","description":"org.hexworks.amethyst.api.system.Actor.id","location":"amethyst.core/org.hexworks.amethyst.api.system/-actor/id.html","searchKeys":["id","abstract val id: UUID"]},{"name":"abstract val id: UUID","description":"org.hexworks.amethyst.api.system.Behavior.id","location":"amethyst.core/org.hexworks.amethyst.api.system/-behavior/id.html","searchKeys":["id","abstract val id: UUID"]},{"name":"abstract val id: UUID","description":"org.hexworks.amethyst.api.system.Facet.id","location":"amethyst.core/org.hexworks.amethyst.api.system/-facet/id.html","searchKeys":["id","abstract val id: UUID"]},{"name":"abstract val id: UUID","description":"org.hexworks.amethyst.api.system.StateFacet.id","location":"amethyst.core/org.hexworks.amethyst.api.system/-state-facet/id.html","searchKeys":["id","abstract val id: UUID"]},{"name":"abstract val id: UUID","description":"org.hexworks.amethyst.api.system.System.id","location":"amethyst.core/org.hexworks.amethyst.api.system/-system/id.html","searchKeys":["id","abstract val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.id","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.internal.system.CompositeAndBehavior.id","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-and-behavior/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.internal.system.CompositeFacet.id","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-facet/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.internal.system.CompositeOrBehavior.id","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-or-behavior/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.internal.system.StateMachineFacet.id","location":"amethyst.core/org.hexworks.amethyst.internal.system/-state-machine-facet/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.samples.StateMachineSample.Closeable.id","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-closeable/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.samples.StateMachineSample.HiddenInventory.id","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-hidden-inventory/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.samples.StateMachineSample.Inventory.id","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-inventory/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.samples.StateMachineSample.InventoryHandler.id","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-inventory-handler/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.samples.StateMachineSample.MyType.id","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-my-type/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.samples.StateMachineSample.Openable.id","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-openable/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"org.hexworks.amethyst.samples.StateMachineSample.Unlockable.id","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-unlockable/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"stress.EngineStressTest.WaitingBehavior.id","location":"amethyst.core/stress/-engine-stress-test/-waiting-behavior/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"stress.TestAttribute.id","location":"amethyst.core/stress/-test-attribute/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"stress.TestBehavior.id","location":"amethyst.core/stress/-test-behavior/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"stress.TestEntityType.id","location":"amethyst.core/stress/-test-entity-type/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"open override val id: UUID","description":"stress.TestFacet.id","location":"amethyst.core/stress/-test-facet/id.html","searchKeys":["id","open override val id: UUID"]},{"name":"val type: T","description":"Entity.type","location":"amethyst.core/[root]/-entity/type.html","searchKeys":["type","val type: T"]},{"name":"open override val type: T","description":"org.hexworks.amethyst.api.base.BaseEntity.type","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity/type.html","searchKeys":["type","open override val type: T"]},{"name":"abstract val type: T","description":"org.hexworks.amethyst.api.entity.Entity.type","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/type.html","searchKeys":["type","abstract val type: T"]},{"name":"abstract val type: T","description":"org.hexworks.amethyst.api.entity.MutableEntity.type","location":"amethyst.core/org.hexworks.amethyst.api.entity/-mutable-entity/type.html","searchKeys":["type","abstract val type: T"]},{"name":"open override val type: T","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.type","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/type.html","searchKeys":["type","open override val type: T"]},{"name":"interface EntityType<C : Context> : Attribute","description":"EntityType","location":"amethyst.core/[root]/-entity-type/index.html","searchKeys":["EntityType","interface EntityType<C : Context> : Attribute"]},{"name":"interface EntityType : Attribute","description":"org.hexworks.amethyst.api.entity.EntityType","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity-type/index.html","searchKeys":["EntityType","interface EntityType : Attribute"]},{"name":"object FaunaContext : Context","description":"FaunaContext","location":"amethyst.core/[root]/-fauna-context/index.html","searchKeys":["FaunaContext","object FaunaContext : Context"]},{"name":"object FloraContext : Context","description":"FloraContext","location":"amethyst.core/[root]/-flora-context/index.html","searchKeys":["FloraContext","object FloraContext : Context"]},{"name":"data class LastUpdate(lastUpdate: Long) : Attribute","description":"LastUpdate","location":"amethyst.core/[root]/-last-update/index.html","searchKeys":["LastUpdate","data class LastUpdate(lastUpdate: Long) : Attribute"]},{"name":"fun LastUpdate(lastUpdate: Long = System.currentTimeMillis())","description":"LastUpdate.LastUpdate","location":"amethyst.core/[root]/-last-update/-last-update.html","searchKeys":["LastUpdate","fun LastUpdate(lastUpdate: Long = System.currentTimeMillis())"]},{"name":"var lastUpdate: Long","description":"LastUpdate.lastUpdate","location":"amethyst.core/[root]/-last-update/last-update.html","searchKeys":["lastUpdate","var lastUpdate: Long"]},{"name":"object Processor : EntityType<ProcessorContext> ","description":"Processor","location":"amethyst.core/[root]/-processor/index.html","searchKeys":["Processor","object Processor : EntityType<ProcessorContext> "]},{"name":"data class ProcessorContext(currentTime: Long, entities: Sequence<Entity<Context, EntityType<Context>>>) : Context","description":"ProcessorContext","location":"amethyst.core/[root]/-processor-context/index.html","searchKeys":["ProcessorContext","data class ProcessorContext(currentTime: Long, entities: Sequence<Entity<Context, EntityType<Context>>>) : Context"]},{"name":"fun ProcessorContext(currentTime: Long, entities: Sequence<Entity<Context, EntityType<Context>>>)","description":"ProcessorContext.ProcessorContext","location":"amethyst.core/[root]/-processor-context/-processor-context.html","searchKeys":["ProcessorContext","fun ProcessorContext(currentTime: Long, entities: Sequence<Entity<Context, EntityType<Context>>>)"]},{"name":"operator fun component2(): Sequence<Entity<Context, EntityType<Context>>>","description":"ProcessorContext.component2","location":"amethyst.core/[root]/-processor-context/component2.html","searchKeys":["component2","operator fun component2(): Sequence<Entity<Context, EntityType<Context>>>"]},{"name":"operator fun component2(): Long","description":"org.hexworks.amethyst.api.attribute.EntityClock.component2","location":"amethyst.core/org.hexworks.amethyst.api.attribute/-entity-clock/component2.html","searchKeys":["component2","operator fun component2(): Long"]},{"name":"operator fun component2(): Entity<out EntityType, C>","description":"org.hexworks.amethyst.api.message.StateChanged.component2","location":"amethyst.core/org.hexworks.amethyst.api.message/-state-changed/component2.html","searchKeys":["component2","operator fun component2(): Entity<out EntityType, C>"]},{"name":"operator fun component2(): Entity<out EntityType, StateMachineSample.MyContext>","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Close.component2","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-close/component2.html","searchKeys":["component2","operator fun component2(): Entity<out EntityType, StateMachineSample.MyContext>"]},{"name":"operator fun component2(): Entity<out EntityType, StateMachineSample.MyContext>","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Open.component2","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-open/component2.html","searchKeys":["component2","operator fun component2(): Entity<out EntityType, StateMachineSample.MyContext>"]},{"name":"operator fun component2(): Entity<out EntityType, StateMachineSample.MyContext>","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Unlock.component2","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-unlock/component2.html","searchKeys":["component2","operator fun component2(): Entity<out EntityType, StateMachineSample.MyContext>"]},{"name":"operator fun component2(): Entity<out EntityType, StateMachineSample.MyContext>","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Closed.component2","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-closed/component2.html","searchKeys":["component2","operator fun component2(): Entity<out EntityType, StateMachineSample.MyContext>"]},{"name":"operator fun component2(): Entity<out EntityType, StateMachineSample.MyContext>","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Opened.component2","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-opened/component2.html","searchKeys":["component2","operator fun component2(): Entity<out EntityType, StateMachineSample.MyContext>"]},{"name":"operator fun component2(): Entity<out EntityType, StateMachineSample.MyContext>","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Unlocked.component2","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-unlocked/component2.html","searchKeys":["component2","operator fun component2(): Entity<out EntityType, StateMachineSample.MyContext>"]},{"name":"operator fun component2(): Int","description":"stress.TestAttribute.component2","location":"amethyst.core/stress/-test-attribute/component2.html","searchKeys":["component2","operator fun component2(): Int"]},{"name":"val currentTime: Long","description":"ProcessorContext.currentTime","location":"amethyst.core/[root]/-processor-context/current-time.html","searchKeys":["currentTime","val currentTime: Long"]},{"name":"val entities: Sequence<Entity<Context, EntityType<Context>>>","description":"ProcessorContext.entities","location":"amethyst.core/[root]/-processor-context/entities.html","searchKeys":["entities","val entities: Sequence<Entity<Context, EntityType<Context>>>"]},{"name":"fun Engine.addProcessor(processor: Entity<ProcessorContext, Processor>)","description":"addProcessor","location":"amethyst.core/[root]/add-processor.html","searchKeys":["addProcessor","fun Engine.addProcessor(processor: Entity<ProcessorContext, Processor>)"]},{"name":"fun main()","description":"main","location":"amethyst.core/[root]/main.html","searchKeys":["main","fun main()"]},{"name":"fun main(args: Array<String>)","description":"stress.EngineStressTest.main","location":"amethyst.core/stress/-engine-stress-test/main.html","searchKeys":["main","fun main(args: Array<String>)"]},{"name":"object Consumed : Response","description":"org.hexworks.amethyst.api.Consumed","location":"amethyst.core/org.hexworks.amethyst.api/-consumed/index.html","searchKeys":["Consumed","object Consumed : Response"]},{"name":"interface Context","description":"org.hexworks.amethyst.api.Context","location":"amethyst.core/org.hexworks.amethyst.api/-context/index.html","searchKeys":["Context","interface Context"]},{"name":"object Companion","description":"org.hexworks.amethyst.api.Engine.Companion","location":"amethyst.core/org.hexworks.amethyst.api/-engine/-companion/index.html","searchKeys":["Companion","object Companion"]},{"name":"object Companion","description":"org.hexworks.amethyst.api.accessor.AttributeAccessor.Companion","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-attribute-accessor/-companion/index.html","searchKeys":["Companion","object Companion"]},{"name":"object Companion","description":"org.hexworks.amethyst.api.accessor.BehaviorAccessor.Companion","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-behavior-accessor/-companion/index.html","searchKeys":["Companion","object Companion"]},{"name":"object Companion","description":"org.hexworks.amethyst.api.accessor.FacetAccessor.Companion","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-facet-accessor/-companion/index.html","searchKeys":["Companion","object Companion"]},{"name":"object Companion","description":"org.hexworks.amethyst.api.builder.EntityBuilder.Companion","location":"amethyst.core/org.hexworks.amethyst.api.builder/-entity-builder/-companion/index.html","searchKeys":["Companion","object Companion"]},{"name":"object Companion","description":"org.hexworks.amethyst.api.mutator.AttributeMutator.Companion","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-attribute-mutator/-companion/index.html","searchKeys":["Companion","object Companion"]},{"name":"object Companion","description":"org.hexworks.amethyst.api.mutator.BehaviorMutator.Companion","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-behavior-mutator/-companion/index.html","searchKeys":["Companion","object Companion"]},{"name":"object Companion","description":"org.hexworks.amethyst.api.mutator.FacetMutator.Companion","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-facet-mutator/-companion/index.html","searchKeys":["Companion","object Companion"]},{"name":"fun <T : Context> create(coroutineContext: CoroutineContext = Dispatchers.Default): TurnBasedEngine<T>","description":"org.hexworks.amethyst.api.Engine.Companion.create","location":"amethyst.core/org.hexworks.amethyst.api/-engine/-companion/create.html","searchKeys":["create","fun <T : Context> create(coroutineContext: CoroutineContext = Dispatchers.Default): TurnBasedEngine<T>"]},{"name":"fun create(attributes: Set<Attribute>): AttributeAccessor","description":"org.hexworks.amethyst.api.accessor.AttributeAccessor.Companion.create","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-attribute-accessor/-companion/create.html","searchKeys":["create","fun create(attributes: Set<Attribute>): AttributeAccessor"]},{"name":"fun <C : Context> create(behaviors: Set<Behavior<C>>): BehaviorAccessor<C>","description":"org.hexworks.amethyst.api.accessor.BehaviorAccessor.Companion.create","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-behavior-accessor/-companion/create.html","searchKeys":["create","fun <C : Context> create(behaviors: Set<Behavior<C>>): BehaviorAccessor<C>"]},{"name":"fun <C : Context> create(facets: Set<FacetWithContext<C>>): FacetAccessor<C>","description":"org.hexworks.amethyst.api.accessor.FacetAccessor.Companion.create","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-facet-accessor/-companion/create.html","searchKeys":["create","fun <C : Context> create(facets: Set<FacetWithContext<C>>): FacetAccessor<C>"]},{"name":"fun create(attributes: Set<Attribute>): AttributeMutator","description":"org.hexworks.amethyst.api.mutator.AttributeMutator.Companion.create","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-attribute-mutator/-companion/create.html","searchKeys":["create","fun create(attributes: Set<Attribute>): AttributeMutator"]},{"name":"fun <C : Context> create(behaviors: Set<Behavior<C>>): BehaviorMutator<C>","description":"org.hexworks.amethyst.api.mutator.BehaviorMutator.Companion.create","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-behavior-mutator/-companion/create.html","searchKeys":["create","fun <C : Context> create(behaviors: Set<Behavior<C>>): BehaviorMutator<C>"]},{"name":"fun <C : Context> create(facets: Set<FacetWithContext<C>>): FacetMutator<C>","description":"org.hexworks.amethyst.api.mutator.FacetMutator.Companion.create","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-facet-mutator/-companion/create.html","searchKeys":["create","fun <C : Context> create(facets: Set<FacetWithContext<C>>): FacetMutator<C>"]},{"name":"abstract fun start(context: T): Job","description":"org.hexworks.amethyst.api.Engine.start","location":"amethyst.core/org.hexworks.amethyst.api/-engine/start.html","searchKeys":["start","abstract fun start(context: T): Job"]},{"name":"open override fun start(context: T): Job","description":"org.hexworks.amethyst.internal.RealTimeEngine.start","location":"amethyst.core/org.hexworks.amethyst.internal/-real-time-engine/start.html","searchKeys":["start","open override fun start(context: T): Job"]},{"name":"open override fun start(context: T): Job","description":"org.hexworks.amethyst.internal.TurnBasedEngine.start","location":"amethyst.core/org.hexworks.amethyst.internal/-turn-based-engine/start.html","searchKeys":["start","open override fun start(context: T): Job"]},{"name":"interface Message<C : Context>","description":"org.hexworks.amethyst.api.Message","location":"amethyst.core/org.hexworks.amethyst.api/-message/index.html","searchKeys":["Message","interface Message<C : Context>"]},{"name":"abstract val context: C","description":"org.hexworks.amethyst.api.Message.context","location":"amethyst.core/org.hexworks.amethyst.api/-message/context.html","searchKeys":["context","abstract val context: C"]},{"name":"open override val context: C","description":"org.hexworks.amethyst.api.message.StateChanged.context","location":"amethyst.core/org.hexworks.amethyst.api.message/-state-changed/context.html","searchKeys":["context","open override val context: C"]},{"name":"open override val context: StateMachineSample.MyContext","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Close.context","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-close/context.html","searchKeys":["context","open override val context: StateMachineSample.MyContext"]},{"name":"open override val context: StateMachineSample.MyContext","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Open.context","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-open/context.html","searchKeys":["context","open override val context: StateMachineSample.MyContext"]},{"name":"open override val context: StateMachineSample.MyContext","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Unlock.context","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-unlock/context.html","searchKeys":["context","open override val context: StateMachineSample.MyContext"]},{"name":"abstract val context: StateMachineSample.MyContext","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.context","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/context.html","searchKeys":["context","abstract val context: StateMachineSample.MyContext"]},{"name":"open override val context: StateMachineSample.MyContext","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Closed.context","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-closed/context.html","searchKeys":["context","open override val context: StateMachineSample.MyContext"]},{"name":"open override val context: StateMachineSample.MyContext","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Opened.context","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-opened/context.html","searchKeys":["context","open override val context: StateMachineSample.MyContext"]},{"name":"open override val context: StateMachineSample.MyContext","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Unlocked.context","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-unlocked/context.html","searchKeys":["context","open override val context: StateMachineSample.MyContext"]},{"name":"abstract val context: StateMachineSample.MyContext","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.context","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/context.html","searchKeys":["context","abstract val context: StateMachineSample.MyContext"]},{"name":"open override val context: TestContext","description":"stress.TestMessage.context","location":"amethyst.core/stress/-test-message/context.html","searchKeys":["context","open override val context: TestContext"]},{"name":"abstract val source: Entity<out EntityType, C>","description":"org.hexworks.amethyst.api.Message.source","location":"amethyst.core/org.hexworks.amethyst.api/-message/source.html","searchKeys":["source","abstract val source: Entity<out EntityType, C>"]},{"name":"open override val source: Entity<out EntityType, C>","description":"org.hexworks.amethyst.api.message.StateChanged.source","location":"amethyst.core/org.hexworks.amethyst.api.message/-state-changed/source.html","searchKeys":["source","open override val source: Entity<out EntityType, C>"]},{"name":"open override val source: Entity<out EntityType, StateMachineSample.MyContext>","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Close.source","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-close/source.html","searchKeys":["source","open override val source: Entity<out EntityType, StateMachineSample.MyContext>"]},{"name":"open override val source: Entity<out EntityType, StateMachineSample.MyContext>","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Open.source","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-open/source.html","searchKeys":["source","open override val source: Entity<out EntityType, StateMachineSample.MyContext>"]},{"name":"open override val source: Entity<out EntityType, StateMachineSample.MyContext>","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Unlock.source","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-unlock/source.html","searchKeys":["source","open override val source: Entity<out EntityType, StateMachineSample.MyContext>"]},{"name":"abstract val source: Entity<out EntityType, StateMachineSample.MyContext>","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.source","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/source.html","searchKeys":["source","abstract val source: Entity<out EntityType, StateMachineSample.MyContext>"]},{"name":"open override val source: Entity<out EntityType, StateMachineSample.MyContext>","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Closed.source","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-closed/source.html","searchKeys":["source","open override val source: Entity<out EntityType, StateMachineSample.MyContext>"]},{"name":"open override val source: Entity<out EntityType, StateMachineSample.MyContext>","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Opened.source","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-opened/source.html","searchKeys":["source","open override val source: Entity<out EntityType, StateMachineSample.MyContext>"]},{"name":"open override val source: Entity<out EntityType, StateMachineSample.MyContext>","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Unlocked.source","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-unlocked/source.html","searchKeys":["source","open override val source: Entity<out EntityType, StateMachineSample.MyContext>"]},{"name":"abstract val source: Entity<out EntityType, StateMachineSample.MyContext>","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.source","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/source.html","searchKeys":["source","abstract val source: Entity<out EntityType, StateMachineSample.MyContext>"]},{"name":"open override val source: Entity<TestEntityType, TestContext>","description":"stress.TestMessage.source","location":"amethyst.core/stress/-test-message/source.html","searchKeys":["source","open override val source: Entity<TestEntityType, TestContext>"]},{"name":"data class MessageResponse<C : Context>(message: Message<C>) : Response","description":"org.hexworks.amethyst.api.MessageResponse","location":"amethyst.core/org.hexworks.amethyst.api/-message-response/index.html","searchKeys":["MessageResponse","data class MessageResponse<C : Context>(message: Message<C>) : Response"]},{"name":"fun <C : Context> MessageResponse(message: Message<C>)","description":"org.hexworks.amethyst.api.MessageResponse.MessageResponse","location":"amethyst.core/org.hexworks.amethyst.api/-message-response/-message-response.html","searchKeys":["MessageResponse","fun <C : Context> MessageResponse(message: Message<C>)"]},{"name":"val message: Message<C>","description":"org.hexworks.amethyst.api.MessageResponse.message","location":"amethyst.core/org.hexworks.amethyst.api/-message-response/message.html","searchKeys":["message","val message: Message<C>"]},{"name":"object Pass : Response","description":"org.hexworks.amethyst.api.Pass","location":"amethyst.core/org.hexworks.amethyst.api/-pass/index.html","searchKeys":["Pass","object Pass : Response"]},{"name":"sealed class Response","description":"org.hexworks.amethyst.api.Response","location":"amethyst.core/org.hexworks.amethyst.api/-response/index.html","searchKeys":["Response","sealed class Response"]},{"name":"data class StateResponse<C : Context, P : Message<C>, F : Facet<C, P>>(facet: F) : Response","description":"org.hexworks.amethyst.api.StateResponse","location":"amethyst.core/org.hexworks.amethyst.api/-state-response/index.html","searchKeys":["StateResponse","data class StateResponse<C : Context, P : Message<C>, F : Facet<C, P>>(facet: F) : Response"]},{"name":"fun <F : Facet<C, P>> StateResponse(facet: F)","description":"org.hexworks.amethyst.api.StateResponse.StateResponse","location":"amethyst.core/org.hexworks.amethyst.api/-state-response/-state-response.html","searchKeys":["StateResponse","fun <F : Facet<C, P>> StateResponse(facet: F)"]},{"name":"val facet: F","description":"org.hexworks.amethyst.api.StateResponse.facet","location":"amethyst.core/org.hexworks.amethyst.api/-state-response/facet.html","searchKeys":["facet","val facet: F"]},{"name":"interface AttributeAccessor","description":"org.hexworks.amethyst.api.accessor.AttributeAccessor","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-attribute-accessor/index.html","searchKeys":["AttributeAccessor","interface AttributeAccessor"]},{"name":"open fun <T : Attribute> findAttribute(klass: KClass<T>): Maybe<T>","description":"org.hexworks.amethyst.api.accessor.AttributeAccessor.findAttribute","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-attribute-accessor/find-attribute.html","searchKeys":["findAttribute","open fun <T : Attribute> findAttribute(klass: KClass<T>): Maybe<T>"]},{"name":"open override fun <T : Attribute> findAttribute(klass: KClass<T>): Maybe<T>","description":"org.hexworks.amethyst.internal.accessor.DefaultAttributeMutator.findAttribute","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-attribute-mutator/find-attribute.html","searchKeys":["findAttribute","open override fun <T : Attribute> findAttribute(klass: KClass<T>): Maybe<T>"]},{"name":"abstract fun <T : Attribute> findAttributeOrNull(klass: KClass<T>): T?","description":"org.hexworks.amethyst.api.accessor.AttributeAccessor.findAttributeOrNull","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-attribute-accessor/find-attribute-or-null.html","searchKeys":["findAttributeOrNull","abstract fun <T : Attribute> findAttributeOrNull(klass: KClass<T>): T?"]},{"name":"open override fun <T : Attribute> findAttributeOrNull(klass: KClass<T>): T?","description":"org.hexworks.amethyst.internal.accessor.DefaultAttributeMutator.findAttributeOrNull","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-attribute-mutator/find-attribute-or-null.html","searchKeys":["findAttributeOrNull","open override fun <T : Attribute> findAttributeOrNull(klass: KClass<T>): T?"]},{"name":"abstract val hasAttributes: Boolean","description":"org.hexworks.amethyst.api.accessor.AttributeAccessor.hasAttributes","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-attribute-accessor/has-attributes.html","searchKeys":["hasAttributes","abstract val hasAttributes: Boolean"]},{"name":"open override val hasAttributes: Boolean","description":"org.hexworks.amethyst.api.base.BaseEntity.hasAttributes","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity/has-attributes.html","searchKeys":["hasAttributes","open override val hasAttributes: Boolean"]},{"name":"abstract val hasAttributes: Boolean","description":"org.hexworks.amethyst.api.entity.Entity.hasAttributes","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/has-attributes.html","searchKeys":["hasAttributes","abstract val hasAttributes: Boolean"]},{"name":"abstract val hasAttributes: Boolean","description":"org.hexworks.amethyst.api.entity.MutableEntity.hasAttributes","location":"amethyst.core/org.hexworks.amethyst.api.entity/-mutable-entity/has-attributes.html","searchKeys":["hasAttributes","abstract val hasAttributes: Boolean"]},{"name":"abstract val hasAttributes: Boolean","description":"org.hexworks.amethyst.api.mutator.AttributeMutator.hasAttributes","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-attribute-mutator/has-attributes.html","searchKeys":["hasAttributes","abstract val hasAttributes: Boolean"]},{"name":"open override val hasAttributes: Boolean","description":"org.hexworks.amethyst.internal.accessor.DefaultAttributeMutator.hasAttributes","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-attribute-mutator/has-attributes.html","searchKeys":["hasAttributes","open override val hasAttributes: Boolean"]},{"name":"open override val hasAttributes: Boolean","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.hasAttributes","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/has-attributes.html","searchKeys":["hasAttributes","open override val hasAttributes: Boolean"]},{"name":"interface BehaviorAccessor<C : Context>","description":"org.hexworks.amethyst.api.accessor.BehaviorAccessor","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-behavior-accessor/index.html","searchKeys":["BehaviorAccessor","interface BehaviorAccessor<C : Context>"]},{"name":"open fun <T : Behavior<C>> findBehavior(klass: KClass<T>): Maybe<T>","description":"org.hexworks.amethyst.api.accessor.BehaviorAccessor.findBehavior","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-behavior-accessor/find-behavior.html","searchKeys":["findBehavior","open fun <T : Behavior<C>> findBehavior(klass: KClass<T>): Maybe<T>"]},{"name":"open override fun <T : Behavior<C>> findBehavior(klass: KClass<T>): Maybe<T>","description":"org.hexworks.amethyst.internal.accessor.DefaultBehaviorMutator.findBehavior","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-behavior-mutator/find-behavior.html","searchKeys":["findBehavior","open override fun <T : Behavior<C>> findBehavior(klass: KClass<T>): Maybe<T>"]},{"name":"abstract fun <T : Behavior<C>> findBehaviorOrNull(klass: KClass<T>): T?","description":"org.hexworks.amethyst.api.accessor.BehaviorAccessor.findBehaviorOrNull","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-behavior-accessor/find-behavior-or-null.html","searchKeys":["findBehaviorOrNull","abstract fun <T : Behavior<C>> findBehaviorOrNull(klass: KClass<T>): T?"]},{"name":"open override fun <T : Behavior<C>> findBehaviorOrNull(klass: KClass<T>): T?","description":"org.hexworks.amethyst.internal.accessor.DefaultBehaviorMutator.findBehaviorOrNull","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-behavior-mutator/find-behavior-or-null.html","searchKeys":["findBehaviorOrNull","open override fun <T : Behavior<C>> findBehaviorOrNull(klass: KClass<T>): T?"]},{"name":"abstract val hasBehaviors: Boolean","description":"org.hexworks.amethyst.api.accessor.BehaviorAccessor.hasBehaviors","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-behavior-accessor/has-behaviors.html","searchKeys":["hasBehaviors","abstract val hasBehaviors: Boolean"]},{"name":"open override val hasBehaviors: Boolean","description":"org.hexworks.amethyst.api.base.BaseEntity.hasBehaviors","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity/has-behaviors.html","searchKeys":["hasBehaviors","open override val hasBehaviors: Boolean"]},{"name":"abstract val hasBehaviors: Boolean","description":"org.hexworks.amethyst.api.entity.Entity.hasBehaviors","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/has-behaviors.html","searchKeys":["hasBehaviors","abstract val hasBehaviors: Boolean"]},{"name":"abstract val hasBehaviors: Boolean","description":"org.hexworks.amethyst.api.entity.MutableEntity.hasBehaviors","location":"amethyst.core/org.hexworks.amethyst.api.entity/-mutable-entity/has-behaviors.html","searchKeys":["hasBehaviors","abstract val hasBehaviors: Boolean"]},{"name":"abstract val hasBehaviors: Boolean","description":"org.hexworks.amethyst.api.mutator.BehaviorMutator.hasBehaviors","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-behavior-mutator/has-behaviors.html","searchKeys":["hasBehaviors","abstract val hasBehaviors: Boolean"]},{"name":"open override val hasBehaviors: Boolean","description":"org.hexworks.amethyst.internal.accessor.DefaultBehaviorMutator.hasBehaviors","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-behavior-mutator/has-behaviors.html","searchKeys":["hasBehaviors","open override val hasBehaviors: Boolean"]},{"name":"open override val hasBehaviors: Boolean","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.hasBehaviors","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/has-behaviors.html","searchKeys":["hasBehaviors","open override val hasBehaviors: Boolean"]},{"name":"interface FacetAccessor<C : Context>","description":"org.hexworks.amethyst.api.accessor.FacetAccessor","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-facet-accessor/index.html","searchKeys":["FacetAccessor","interface FacetAccessor<C : Context>"]},{"name":"abstract val facets: Sequence<FacetWithContext<C>>","description":"org.hexworks.amethyst.api.accessor.FacetAccessor.facets","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-facet-accessor/facets.html","searchKeys":["facets","abstract val facets: Sequence<FacetWithContext<C>>"]},{"name":"open override val facets: Sequence<FacetWithContext<C>>","description":"org.hexworks.amethyst.api.base.BaseEntity.facets","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity/facets.html","searchKeys":["facets","open override val facets: Sequence<FacetWithContext<C>>"]},{"name":"fun facets(vararg facets: FacetWithContext<C>): EntityBuilder<T, C>","description":"org.hexworks.amethyst.api.builder.EntityBuilder.facets","location":"amethyst.core/org.hexworks.amethyst.api.builder/-entity-builder/facets.html","searchKeys":["facets","fun facets(vararg facets: FacetWithContext<C>): EntityBuilder<T, C>"]},{"name":"abstract val facets: Sequence<FacetWithContext<C>>","description":"org.hexworks.amethyst.api.entity.Entity.facets","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/facets.html","searchKeys":["facets","abstract val facets: Sequence<FacetWithContext<C>>"]},{"name":"abstract val facets: Sequence<FacetWithContext<C>>","description":"org.hexworks.amethyst.api.entity.MutableEntity.facets","location":"amethyst.core/org.hexworks.amethyst.api.entity/-mutable-entity/facets.html","searchKeys":["facets","abstract val facets: Sequence<FacetWithContext<C>>"]},{"name":"abstract val facets: Sequence<FacetWithContext<C>>","description":"org.hexworks.amethyst.api.mutator.FacetMutator.facets","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-facet-mutator/facets.html","searchKeys":["facets","abstract val facets: Sequence<FacetWithContext<C>>"]},{"name":"open override val facets: Sequence<FacetWithContext<C>>","description":"org.hexworks.amethyst.internal.accessor.DefaultFacetMutator.facets","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-facet-mutator/facets.html","searchKeys":["facets","open override val facets: Sequence<FacetWithContext<C>>"]},{"name":"open override val facets: Sequence<FacetWithContext<C>>","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.facets","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/facets.html","searchKeys":["facets","open override val facets: Sequence<FacetWithContext<C>>"]},{"name":"open fun <T : FacetWithContext<C>> findFacet(klass: KClass<T>): Maybe<T>","description":"org.hexworks.amethyst.api.accessor.FacetAccessor.findFacet","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-facet-accessor/find-facet.html","searchKeys":["findFacet","open fun <T : FacetWithContext<C>> findFacet(klass: KClass<T>): Maybe<T>"]},{"name":"open override fun <T : FacetWithContext<C>> findFacet(klass: KClass<T>): Maybe<T>","description":"org.hexworks.amethyst.internal.accessor.DefaultFacetMutator.findFacet","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-facet-mutator/find-facet.html","searchKeys":["findFacet","open override fun <T : FacetWithContext<C>> findFacet(klass: KClass<T>): Maybe<T>"]},{"name":"abstract fun <T : FacetWithContext<C>> findFacetOrNull(klass: KClass<T>): T?","description":"org.hexworks.amethyst.api.accessor.FacetAccessor.findFacetOrNull","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-facet-accessor/find-facet-or-null.html","searchKeys":["findFacetOrNull","abstract fun <T : FacetWithContext<C>> findFacetOrNull(klass: KClass<T>): T?"]},{"name":"open override fun <T : FacetWithContext<C>> findFacetOrNull(klass: KClass<T>): T?","description":"org.hexworks.amethyst.internal.accessor.DefaultFacetMutator.findFacetOrNull","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-facet-mutator/find-facet-or-null.html","searchKeys":["findFacetOrNull","open override fun <T : FacetWithContext<C>> findFacetOrNull(klass: KClass<T>): T?"]},{"name":"abstract val hasFacets: Boolean","description":"org.hexworks.amethyst.api.accessor.FacetAccessor.hasFacets","location":"amethyst.core/org.hexworks.amethyst.api.accessor/-facet-accessor/has-facets.html","searchKeys":["hasFacets","abstract val hasFacets: Boolean"]},{"name":"open override val hasFacets: Boolean","description":"org.hexworks.amethyst.api.base.BaseEntity.hasFacets","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity/has-facets.html","searchKeys":["hasFacets","open override val hasFacets: Boolean"]},{"name":"abstract val hasFacets: Boolean","description":"org.hexworks.amethyst.api.entity.Entity.hasFacets","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/has-facets.html","searchKeys":["hasFacets","abstract val hasFacets: Boolean"]},{"name":"abstract val hasFacets: Boolean","description":"org.hexworks.amethyst.api.entity.MutableEntity.hasFacets","location":"amethyst.core/org.hexworks.amethyst.api.entity/-mutable-entity/has-facets.html","searchKeys":["hasFacets","abstract val hasFacets: Boolean"]},{"name":"abstract val hasFacets: Boolean","description":"org.hexworks.amethyst.api.mutator.FacetMutator.hasFacets","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-facet-mutator/has-facets.html","searchKeys":["hasFacets","abstract val hasFacets: Boolean"]},{"name":"open override val hasFacets: Boolean","description":"org.hexworks.amethyst.internal.accessor.DefaultFacetMutator.hasFacets","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-facet-mutator/has-facets.html","searchKeys":["hasFacets","open override val hasFacets: Boolean"]},{"name":"open override val hasFacets: Boolean","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.hasFacets","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/has-facets.html","searchKeys":["hasFacets","open override val hasFacets: Boolean"]},{"name":"data class EntityClock(id: UUID, createdAt: Long, logicalTime: Long) : Attribute, Comparable<EntityClock> ","description":"org.hexworks.amethyst.api.attribute.EntityClock","location":"amethyst.core/org.hexworks.amethyst.api.attribute/-entity-clock/index.html","searchKeys":["EntityClock","data class EntityClock(id: UUID, createdAt: Long, logicalTime: Long) : Attribute, Comparable<EntityClock> "]},{"name":"fun EntityClock(id: UUID, createdAt: Long = Clock.System.now().toEpochMilliseconds(), logicalTime: Long = 100)","description":"org.hexworks.amethyst.api.attribute.EntityClock.EntityClock","location":"amethyst.core/org.hexworks.amethyst.api.attribute/-entity-clock/-entity-clock.html","searchKeys":["EntityClock","fun EntityClock(id: UUID, createdAt: Long = Clock.System.now().toEpochMilliseconds(), logicalTime: Long = 100)"]},{"name":"open operator override fun compareTo(other: EntityClock): Int","description":"org.hexworks.amethyst.api.attribute.EntityClock.compareTo","location":"amethyst.core/org.hexworks.amethyst.api.attribute/-entity-clock/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: EntityClock): Int"]},{"name":"operator fun component3(): Long","description":"org.hexworks.amethyst.api.attribute.EntityClock.component3","location":"amethyst.core/org.hexworks.amethyst.api.attribute/-entity-clock/component3.html","searchKeys":["component3","operator fun component3(): Long"]},{"name":"operator fun component3(): Facet<C, out Message<C>>","description":"org.hexworks.amethyst.api.message.StateChanged.component3","location":"amethyst.core/org.hexworks.amethyst.api.message/-state-changed/component3.html","searchKeys":["component3","operator fun component3(): Facet<C, out Message<C>>"]},{"name":"val createdAt: Long","description":"org.hexworks.amethyst.api.attribute.EntityClock.createdAt","location":"amethyst.core/org.hexworks.amethyst.api.attribute/-entity-clock/created-at.html","searchKeys":["createdAt","val createdAt: Long"]},{"name":"val logicalTime: Long = 100","description":"org.hexworks.amethyst.api.attribute.EntityClock.logicalTime","location":"amethyst.core/org.hexworks.amethyst.api.attribute/-entity-clock/logical-time.html","searchKeys":["logicalTime","val logicalTime: Long = 100"]},{"name":"abstract class BaseActor<C : Context, P : Message<C>>(mandatoryAttribute: KClass<out Attribute>) : Facet<C, P> , Behavior<C> ","description":"org.hexworks.amethyst.api.base.BaseActor","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-actor/index.html","searchKeys":["BaseActor","abstract class BaseActor<C : Context, P : Message<C>>(mandatoryAttribute: KClass<out Attribute>) : Facet<C, P> , Behavior<C> "]},{"name":"fun BaseActor(vararg mandatoryAttribute: KClass<out Attribute>)","description":"org.hexworks.amethyst.api.base.BaseActor.BaseActor","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-actor/-base-actor.html","searchKeys":["BaseActor","fun BaseActor(vararg mandatoryAttribute: KClass<out Attribute>)"]},{"name":"open override val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.api.base.BaseActor.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-actor/mandatory-attributes.html","searchKeys":["mandatoryAttributes","open override val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"open override val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.api.base.BaseBehavior.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-behavior/mandatory-attributes.html","searchKeys":["mandatoryAttributes","open override val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"open override val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.api.base.BaseFacet.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-facet/mandatory-attributes.html","searchKeys":["mandatoryAttributes","open override val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"open override val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.api.base.BaseStateFacet.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-state-facet/mandatory-attributes.html","searchKeys":["mandatoryAttributes","open override val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"abstract val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.api.system.Actor.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.api.system/-actor/mandatory-attributes.html","searchKeys":["mandatoryAttributes","abstract val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"abstract val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.api.system.Behavior.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.api.system/-behavior/mandatory-attributes.html","searchKeys":["mandatoryAttributes","abstract val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"abstract val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.api.system.Facet.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.api.system/-facet/mandatory-attributes.html","searchKeys":["mandatoryAttributes","abstract val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"abstract val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.api.system.StateFacet.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.api.system/-state-facet/mandatory-attributes.html","searchKeys":["mandatoryAttributes","abstract val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"abstract val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.api.system.System.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.api.system/-system/mandatory-attributes.html","searchKeys":["mandatoryAttributes","abstract val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"open override val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.internal.system.CompositeAndBehavior.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-and-behavior/mandatory-attributes.html","searchKeys":["mandatoryAttributes","open override val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"open override val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.internal.system.CompositeFacet.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-facet/mandatory-attributes.html","searchKeys":["mandatoryAttributes","open override val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"open override val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.internal.system.CompositeOrBehavior.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-or-behavior/mandatory-attributes.html","searchKeys":["mandatoryAttributes","open override val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"open override val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.internal.system.StateMachineFacet.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.internal.system/-state-machine-facet/mandatory-attributes.html","searchKeys":["mandatoryAttributes","open override val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"open override val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.samples.StateMachineSample.Closeable.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-closeable/mandatory-attributes.html","searchKeys":["mandatoryAttributes","open override val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"open override val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.samples.StateMachineSample.InventoryHandler.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-inventory-handler/mandatory-attributes.html","searchKeys":["mandatoryAttributes","open override val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"open override val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.samples.StateMachineSample.Openable.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-openable/mandatory-attributes.html","searchKeys":["mandatoryAttributes","open override val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"open override val mandatoryAttributes: Set<KClass<out Attribute>>","description":"org.hexworks.amethyst.samples.StateMachineSample.Unlockable.mandatoryAttributes","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-unlockable/mandatory-attributes.html","searchKeys":["mandatoryAttributes","open override val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"open override val mandatoryAttributes: Set<KClass<out Attribute>>","description":"stress.EngineStressTest.WaitingBehavior.mandatoryAttributes","location":"amethyst.core/stress/-engine-stress-test/-waiting-behavior/mandatory-attributes.html","searchKeys":["mandatoryAttributes","open override val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"open override val mandatoryAttributes: Set<KClass<out Attribute>>","description":"stress.TestBehavior.mandatoryAttributes","location":"amethyst.core/stress/-test-behavior/mandatory-attributes.html","searchKeys":["mandatoryAttributes","open override val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"open override val mandatoryAttributes: Set<KClass<out Attribute>>","description":"stress.TestFacet.mandatoryAttributes","location":"amethyst.core/stress/-test-facet/mandatory-attributes.html","searchKeys":["mandatoryAttributes","open override val mandatoryAttributes: Set<KClass<out Attribute>>"]},{"name":"abstract val messageType: KClass<P>","description":"org.hexworks.amethyst.api.base.BaseActor.messageType","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-actor/message-type.html","searchKeys":["messageType","abstract val messageType: KClass<P>"]},{"name":"open override val messageType: KClass<P>","description":"org.hexworks.amethyst.api.base.BaseFacet.messageType","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-facet/message-type.html","searchKeys":["messageType","open override val messageType: KClass<P>"]},{"name":"open override val messageType: KClass<P>","description":"org.hexworks.amethyst.api.base.BaseStateFacet.messageType","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-state-facet/message-type.html","searchKeys":["messageType","open override val messageType: KClass<P>"]},{"name":"abstract val messageType: KClass<P>","description":"org.hexworks.amethyst.api.system.Actor.messageType","location":"amethyst.core/org.hexworks.amethyst.api.system/-actor/message-type.html","searchKeys":["messageType","abstract val messageType: KClass<P>"]},{"name":"abstract val messageType: KClass<M>","description":"org.hexworks.amethyst.api.system.Facet.messageType","location":"amethyst.core/org.hexworks.amethyst.api.system/-facet/message-type.html","searchKeys":["messageType","abstract val messageType: KClass<M>"]},{"name":"abstract val messageType: KClass<M>","description":"org.hexworks.amethyst.api.system.StateFacet.messageType","location":"amethyst.core/org.hexworks.amethyst.api.system/-state-facet/message-type.html","searchKeys":["messageType","abstract val messageType: KClass<M>"]},{"name":"open override val messageType: KClass<P>","description":"org.hexworks.amethyst.internal.system.CompositeFacet.messageType","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-facet/message-type.html","searchKeys":["messageType","open override val messageType: KClass<P>"]},{"name":"open override val messageType: KClass<P>","description":"org.hexworks.amethyst.internal.system.StateMachineFacet.messageType","location":"amethyst.core/org.hexworks.amethyst.internal.system/-state-machine-facet/message-type.html","searchKeys":["messageType","open override val messageType: KClass<P>"]},{"name":"open override val messageType: KClass<StateMachineSample.BarrierAction.Close>","description":"org.hexworks.amethyst.samples.StateMachineSample.Closeable.messageType","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-closeable/message-type.html","searchKeys":["messageType","open override val messageType: KClass<StateMachineSample.BarrierAction.Close>"]},{"name":"open override val messageType: KClass<StateChanged<StateMachineSample.MyContext>>","description":"org.hexworks.amethyst.samples.StateMachineSample.InventoryHandler.messageType","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-inventory-handler/message-type.html","searchKeys":["messageType","open override val messageType: KClass<StateChanged<StateMachineSample.MyContext>>"]},{"name":"open override val messageType: KClass<StateMachineSample.BarrierAction.Open>","description":"org.hexworks.amethyst.samples.StateMachineSample.Openable.messageType","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-openable/message-type.html","searchKeys":["messageType","open override val messageType: KClass<StateMachineSample.BarrierAction.Open>"]},{"name":"open override val messageType: KClass<StateMachineSample.BarrierAction.Unlock>","description":"org.hexworks.amethyst.samples.StateMachineSample.Unlockable.messageType","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-unlockable/message-type.html","searchKeys":["messageType","open override val messageType: KClass<StateMachineSample.BarrierAction.Unlock>"]},{"name":"open override val messageType: KClass<TestMessage>","description":"stress.TestFacet.messageType","location":"amethyst.core/stress/-test-facet/message-type.html","searchKeys":["messageType","open override val messageType: KClass<TestMessage>"]},{"name":"abstract class BaseAttribute : Attribute","description":"org.hexworks.amethyst.api.base.BaseAttribute","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-attribute/index.html","searchKeys":["BaseAttribute","abstract class BaseAttribute : Attribute"]},{"name":"fun BaseAttribute()","description":"org.hexworks.amethyst.api.base.BaseAttribute.BaseAttribute","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-attribute/-base-attribute.html","searchKeys":["BaseAttribute","fun BaseAttribute()"]},{"name":"abstract class BaseBehavior<C : Context>(mandatoryAttribute: KClass<out Attribute>) : Behavior<C> ","description":"org.hexworks.amethyst.api.base.BaseBehavior","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-behavior/index.html","searchKeys":["BaseBehavior","abstract class BaseBehavior<C : Context>(mandatoryAttribute: KClass<out Attribute>) : Behavior<C> "]},{"name":"fun BaseBehavior(vararg mandatoryAttribute: KClass<out Attribute>)","description":"org.hexworks.amethyst.api.base.BaseBehavior.BaseBehavior","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-behavior/-base-behavior.html","searchKeys":["BaseBehavior","fun BaseBehavior(vararg mandatoryAttribute: KClass<out Attribute>)"]},{"name":"abstract class BaseEntity<T : EntityType, C : Context>(type: T, attributes: Set<Attribute>, facets: Set<FacetWithContext<C>>, behaviors: Set<Behavior<C>>) : MutableEntity<T, C> , AttributeMutator, FacetMutator<C> , BehaviorMutator<C> ","description":"org.hexworks.amethyst.api.base.BaseEntity","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity/index.html","searchKeys":["BaseEntity","abstract class BaseEntity<T : EntityType, C : Context>(type: T, attributes: Set<Attribute>, facets: Set<FacetWithContext<C>>, behaviors: Set<Behavior<C>>) : MutableEntity<T, C> , AttributeMutator, FacetMutator<C> , BehaviorMutator<C> "]},{"name":"fun <T : EntityType, C : Context> BaseEntity(type: T, attributes: Set<Attribute> = setOf(), facets: Set<FacetWithContext<C>> = setOf(), behaviors: Set<Behavior<C>> = setOf())","description":"org.hexworks.amethyst.api.base.BaseEntity.BaseEntity","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity/-base-entity.html","searchKeys":["BaseEntity","fun <T : EntityType, C : Context> BaseEntity(type: T, attributes: Set<Attribute> = setOf(), facets: Set<FacetWithContext<C>> = setOf(), behaviors: Set<Behavior<C>> = setOf())"]},{"name":"open override fun asMutableEntity(): MutableEntity<T, C>","description":"org.hexworks.amethyst.api.base.BaseEntity.asMutableEntity","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity/as-mutable-entity.html","searchKeys":["asMutableEntity","open override fun asMutableEntity(): MutableEntity<T, C>"]},{"name":"abstract fun asMutableEntity(): MutableEntity<T, C>","description":"org.hexworks.amethyst.api.entity.Entity.asMutableEntity","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/as-mutable-entity.html","searchKeys":["asMutableEntity","abstract fun asMutableEntity(): MutableEntity<T, C>"]},{"name":"open val description: String","description":"org.hexworks.amethyst.api.base.BaseEntity.description","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity/description.html","searchKeys":["description","open val description: String"]},{"name":"open override val description: String","description":"org.hexworks.amethyst.api.base.BaseEntityType.description","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity-type/description.html","searchKeys":["description","open override val description: String"]},{"name":"open val description: String","description":"org.hexworks.amethyst.api.entity.Entity.description","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/description.html","searchKeys":["description","open val description: String"]},{"name":"abstract val description: String","description":"org.hexworks.amethyst.api.entity.EntityType.description","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity-type/description.html","searchKeys":["description","abstract val description: String"]},{"name":"open val description: String","description":"org.hexworks.amethyst.api.entity.MutableEntity.description","location":"amethyst.core/org.hexworks.amethyst.api.entity/-mutable-entity/description.html","searchKeys":["description","open val description: String"]},{"name":"open val description: String","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.description","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/description.html","searchKeys":["description","open val description: String"]},{"name":"open override val description: String","description":"org.hexworks.amethyst.samples.StateMachineSample.MyType.description","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-my-type/description.html","searchKeys":["description","open override val description: String"]},{"name":"open override val description: String","description":"stress.TestEntityType.description","location":"amethyst.core/stress/-test-entity-type/description.html","searchKeys":["description","open override val description: String"]},{"name":"abstract val needsUpdate: Boolean","description":"org.hexworks.amethyst.api.base.BaseEntity.needsUpdate","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity/needs-update.html","searchKeys":["needsUpdate","abstract val needsUpdate: Boolean"]},{"name":"abstract val needsUpdate: Boolean","description":"org.hexworks.amethyst.api.entity.Entity.needsUpdate","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/needs-update.html","searchKeys":["needsUpdate","abstract val needsUpdate: Boolean"]},{"name":"abstract val needsUpdate: Boolean","description":"org.hexworks.amethyst.api.entity.MutableEntity.needsUpdate","location":"amethyst.core/org.hexworks.amethyst.api.entity/-mutable-entity/needs-update.html","searchKeys":["needsUpdate","abstract val needsUpdate: Boolean"]},{"name":"open override val needsUpdate: Boolean","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.needsUpdate","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/needs-update.html","searchKeys":["needsUpdate","open override val needsUpdate: Boolean"]},{"name":"open override fun toString(): String","description":"org.hexworks.amethyst.api.base.BaseEntity.toString","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity/to-string.html","searchKeys":["toString","open override fun toString(): String"]},{"name":"open override fun toString(): String","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.toString","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/to-string.html","searchKeys":["toString","open override fun toString(): String"]},{"name":"abstract class BaseEntityType(name: String, description: String, id: UUID) : EntityType","description":"org.hexworks.amethyst.api.base.BaseEntityType","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity-type/index.html","searchKeys":["BaseEntityType","abstract class BaseEntityType(name: String, description: String, id: UUID) : EntityType"]},{"name":"fun BaseEntityType(name: String = \"unknown\", description: String = \"\", id: UUID = UUID.randomUUID())","description":"org.hexworks.amethyst.api.base.BaseEntityType.BaseEntityType","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity-type/-base-entity-type.html","searchKeys":["BaseEntityType","fun BaseEntityType(name: String = \"unknown\", description: String = \"\", id: UUID = UUID.randomUUID())"]},{"name":"operator override fun equals(other: Any?): Boolean","description":"org.hexworks.amethyst.api.base.BaseEntityType.equals","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity-type/equals.html","searchKeys":["equals","operator override fun equals(other: Any?): Boolean"]},{"name":"override fun hashCode(): Int","description":"org.hexworks.amethyst.api.base.BaseEntityType.hashCode","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-entity-type/hash-code.html","searchKeys":["hashCode","override fun hashCode(): Int"]},{"name":"abstract class BaseFacet<C : Context, P : Message<C>>(messageType: KClass<P>, mandatoryAttribute: KClass<out Attribute>) : Facet<C, P> ","description":"org.hexworks.amethyst.api.base.BaseFacet","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-facet/index.html","searchKeys":["BaseFacet","abstract class BaseFacet<C : Context, P : Message<C>>(messageType: KClass<P>, mandatoryAttribute: KClass<out Attribute>) : Facet<C, P> "]},{"name":"fun <P : Message<C>> BaseFacet(messageType: KClass<P>, vararg mandatoryAttribute: KClass<out Attribute>)","description":"org.hexworks.amethyst.api.base.BaseFacet.BaseFacet","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-facet/-base-facet.html","searchKeys":["BaseFacet","fun <P : Message<C>> BaseFacet(messageType: KClass<P>, vararg mandatoryAttribute: KClass<out Attribute>)"]},{"name":"open suspend override fun tryReceive(message: Message<C>): Response","description":"org.hexworks.amethyst.api.base.BaseFacet.tryReceive","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-facet/try-receive.html","searchKeys":["tryReceive","open suspend override fun tryReceive(message: Message<C>): Response"]},{"name":"abstract suspend fun tryReceive(message: Message<C>): Response","description":"org.hexworks.amethyst.api.system.Facet.tryReceive","location":"amethyst.core/org.hexworks.amethyst.api.system/-facet/try-receive.html","searchKeys":["tryReceive","abstract suspend fun tryReceive(message: Message<C>): Response"]},{"name":"open suspend override fun tryReceive(message: Message<C>): Response","description":"org.hexworks.amethyst.internal.system.CompositeFacet.tryReceive","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-facet/try-receive.html","searchKeys":["tryReceive","open suspend override fun tryReceive(message: Message<C>): Response"]},{"name":"open suspend override fun tryReceive(message: Message<C>): Response","description":"org.hexworks.amethyst.internal.system.StateMachineFacet.tryReceive","location":"amethyst.core/org.hexworks.amethyst.internal.system/-state-machine-facet/try-receive.html","searchKeys":["tryReceive","open suspend override fun tryReceive(message: Message<C>): Response"]},{"name":"abstract class BaseStateFacet<C : Context, P : Message<C>>(messageType: KClass<P>, mandatoryAttributes: KClass<out Attribute>) : BaseFacet<C, P> , StateFacet<C, P> ","description":"org.hexworks.amethyst.api.base.BaseStateFacet","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-state-facet/index.html","searchKeys":["BaseStateFacet","abstract class BaseStateFacet<C : Context, P : Message<C>>(messageType: KClass<P>, mandatoryAttributes: KClass<out Attribute>) : BaseFacet<C, P> , StateFacet<C, P> "]},{"name":"fun <P : Message<C>> BaseStateFacet(messageType: KClass<P>, vararg mandatoryAttributes: KClass<out Attribute>)","description":"org.hexworks.amethyst.api.base.BaseStateFacet.BaseStateFacet","location":"amethyst.core/org.hexworks.amethyst.api.base/-base-state-facet/-base-state-facet.html","searchKeys":["BaseStateFacet","fun <P : Message<C>> BaseStateFacet(messageType: KClass<P>, vararg mandatoryAttributes: KClass<out Attribute>)"]},{"name":"class EntityBuilder<T : EntityType, C : Context>(type: T)","description":"org.hexworks.amethyst.api.builder.EntityBuilder","location":"amethyst.core/org.hexworks.amethyst.api.builder/-entity-builder/index.html","searchKeys":["EntityBuilder","class EntityBuilder<T : EntityType, C : Context>(type: T)"]},{"name":"fun <T : EntityType> EntityBuilder(type: T)","description":"org.hexworks.amethyst.api.builder.EntityBuilder.EntityBuilder","location":"amethyst.core/org.hexworks.amethyst.api.builder/-entity-builder/-entity-builder.html","searchKeys":["EntityBuilder","fun <T : EntityType> EntityBuilder(type: T)"]},{"name":"fun <T : EntityType, C : Context> newBuilder(type: T): EntityBuilder<T, C>","description":"org.hexworks.amethyst.api.builder.EntityBuilder.Companion.newBuilder","location":"amethyst.core/org.hexworks.amethyst.api.builder/-entity-builder/-companion/new-builder.html","searchKeys":["newBuilder","fun <T : EntityType, C : Context> newBuilder(type: T): EntityBuilder<T, C>"]},{"name":"fun build(): Entity<T, C>","description":"org.hexworks.amethyst.api.builder.EntityBuilder.build","location":"amethyst.core/org.hexworks.amethyst.api.builder/-entity-builder/build.html","searchKeys":["build","fun build(): Entity<T, C>"]},{"name":"abstract suspend fun receiveMessage(message: Message<C>): Response","description":"org.hexworks.amethyst.api.entity.Entity.receiveMessage","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/receive-message.html","searchKeys":["receiveMessage","abstract suspend fun receiveMessage(message: Message<C>): Response"]},{"name":"open suspend override fun receiveMessage(message: Message<C>): Response","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.receiveMessage","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/receive-message.html","searchKeys":["receiveMessage","open suspend override fun receiveMessage(message: Message<C>): Response"]},{"name":"abstract suspend fun sendMessage(message: Message<C>): Boolean","description":"org.hexworks.amethyst.api.entity.Entity.sendMessage","location":"amethyst.core/org.hexworks.amethyst.api.entity/-entity/send-message.html","searchKeys":["sendMessage","abstract suspend fun sendMessage(message: Message<C>): Boolean"]},{"name":"open suspend override fun sendMessage(message: Message<C>): Boolean","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.sendMessage","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/send-message.html","searchKeys":["sendMessage","open suspend override fun sendMessage(message: Message<C>): Boolean"]},{"name":"interface MutableEntity<T : EntityType, C : Context> : Entity<T, C> , AttributeMutator, FacetMutator<C> , BehaviorMutator<C> ","description":"org.hexworks.amethyst.api.entity.MutableEntity","location":"amethyst.core/org.hexworks.amethyst.api.entity/-mutable-entity/index.html","searchKeys":["MutableEntity","interface MutableEntity<T : EntityType, C : Context> : Entity<T, C> , AttributeMutator, FacetMutator<C> , BehaviorMutator<C> "]},{"name":"fun <C : Context, A : Message<C>, M : A> Facet<C, M>.toStateMachine(commonAncestor: KClass<A>): Facet<C, A>","description":"org.hexworks.amethyst.api.extensions.toStateMachine","location":"amethyst.core/org.hexworks.amethyst.api.extensions/to-state-machine.html","searchKeys":["toStateMachine","fun <C : Context, A : Message<C>, M : A> Facet<C, M>.toStateMachine(commonAncestor: KClass<A>): Facet<C, A>"]},{"name":"data class StateChanged<C : Context>(context: C, source: Entity<out EntityType, C>, oldState: Facet<C, out Message<C>>, newState: Facet<C, out Message<C>>) : Message<C> ","description":"org.hexworks.amethyst.api.message.StateChanged","location":"amethyst.core/org.hexworks.amethyst.api.message/-state-changed/index.html","searchKeys":["StateChanged","data class StateChanged<C : Context>(context: C, source: Entity<out EntityType, C>, oldState: Facet<C, out Message<C>>, newState: Facet<C, out Message<C>>) : Message<C> "]},{"name":"fun <C : Context> StateChanged(context: C, source: Entity<out EntityType, C>, oldState: Facet<C, out Message<C>>, newState: Facet<C, out Message<C>>)","description":"org.hexworks.amethyst.api.message.StateChanged.StateChanged","location":"amethyst.core/org.hexworks.amethyst.api.message/-state-changed/-state-changed.html","searchKeys":["StateChanged","fun <C : Context> StateChanged(context: C, source: Entity<out EntityType, C>, oldState: Facet<C, out Message<C>>, newState: Facet<C, out Message<C>>)"]},{"name":"operator fun component4(): Facet<C, out Message<C>>","description":"org.hexworks.amethyst.api.message.StateChanged.component4","location":"amethyst.core/org.hexworks.amethyst.api.message/-state-changed/component4.html","searchKeys":["component4","operator fun component4(): Facet<C, out Message<C>>"]},{"name":"val newState: Facet<C, out Message<C>>","description":"org.hexworks.amethyst.api.message.StateChanged.newState","location":"amethyst.core/org.hexworks.amethyst.api.message/-state-changed/new-state.html","searchKeys":["newState","val newState: Facet<C, out Message<C>>"]},{"name":"val oldState: Facet<C, out Message<C>>","description":"org.hexworks.amethyst.api.message.StateChanged.oldState","location":"amethyst.core/org.hexworks.amethyst.api.message/-state-changed/old-state.html","searchKeys":["oldState","val oldState: Facet<C, out Message<C>>"]},{"name":"interface AttributeMutator : AttributeAccessor","description":"org.hexworks.amethyst.api.mutator.AttributeMutator","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-attribute-mutator/index.html","searchKeys":["AttributeMutator","interface AttributeMutator : AttributeAccessor"]},{"name":"abstract fun addAttribute(attribute: Attribute)","description":"org.hexworks.amethyst.api.mutator.AttributeMutator.addAttribute","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-attribute-mutator/add-attribute.html","searchKeys":["addAttribute","abstract fun addAttribute(attribute: Attribute)"]},{"name":"open override fun addAttribute(attribute: Attribute)","description":"org.hexworks.amethyst.internal.accessor.DefaultAttributeMutator.addAttribute","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-attribute-mutator/add-attribute.html","searchKeys":["addAttribute","open override fun addAttribute(attribute: Attribute)"]},{"name":"abstract fun removeAttribute(attribute: Attribute)","description":"org.hexworks.amethyst.api.mutator.AttributeMutator.removeAttribute","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-attribute-mutator/remove-attribute.html","searchKeys":["removeAttribute","abstract fun removeAttribute(attribute: Attribute)"]},{"name":"open override fun removeAttribute(attribute: Attribute)","description":"org.hexworks.amethyst.internal.accessor.DefaultAttributeMutator.removeAttribute","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-attribute-mutator/remove-attribute.html","searchKeys":["removeAttribute","open override fun removeAttribute(attribute: Attribute)"]},{"name":"interface BehaviorMutator<C : Context> : BehaviorAccessor<C> ","description":"org.hexworks.amethyst.api.mutator.BehaviorMutator","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-behavior-mutator/index.html","searchKeys":["BehaviorMutator","interface BehaviorMutator<C : Context> : BehaviorAccessor<C> "]},{"name":"abstract fun addBehavior(behavior: Behavior<C>)","description":"org.hexworks.amethyst.api.mutator.BehaviorMutator.addBehavior","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-behavior-mutator/add-behavior.html","searchKeys":["addBehavior","abstract fun addBehavior(behavior: Behavior<C>)"]},{"name":"open override fun addBehavior(behavior: Behavior<C>)","description":"org.hexworks.amethyst.internal.accessor.DefaultBehaviorMutator.addBehavior","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-behavior-mutator/add-behavior.html","searchKeys":["addBehavior","open override fun addBehavior(behavior: Behavior<C>)"]},{"name":"abstract fun removeBehavior(behavior: Behavior<C>)","description":"org.hexworks.amethyst.api.mutator.BehaviorMutator.removeBehavior","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-behavior-mutator/remove-behavior.html","searchKeys":["removeBehavior","abstract fun removeBehavior(behavior: Behavior<C>)"]},{"name":"open override fun removeBehavior(behavior: Behavior<C>)","description":"org.hexworks.amethyst.internal.accessor.DefaultBehaviorMutator.removeBehavior","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-behavior-mutator/remove-behavior.html","searchKeys":["removeBehavior","open override fun removeBehavior(behavior: Behavior<C>)"]},{"name":"interface FacetMutator<C : Context> : FacetAccessor<C> ","description":"org.hexworks.amethyst.api.mutator.FacetMutator","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-facet-mutator/index.html","searchKeys":["FacetMutator","interface FacetMutator<C : Context> : FacetAccessor<C> "]},{"name":"abstract fun addFacet(facet: FacetWithContext<C>)","description":"org.hexworks.amethyst.api.mutator.FacetMutator.addFacet","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-facet-mutator/add-facet.html","searchKeys":["addFacet","abstract fun addFacet(facet: FacetWithContext<C>)"]},{"name":"open override fun addFacet(facet: FacetWithContext<C>)","description":"org.hexworks.amethyst.internal.accessor.DefaultFacetMutator.addFacet","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-facet-mutator/add-facet.html","searchKeys":["addFacet","open override fun addFacet(facet: FacetWithContext<C>)"]},{"name":"abstract fun removeFacet(facet: FacetWithContext<C>)","description":"org.hexworks.amethyst.api.mutator.FacetMutator.removeFacet","location":"amethyst.core/org.hexworks.amethyst.api.mutator/-facet-mutator/remove-facet.html","searchKeys":["removeFacet","abstract fun removeFacet(facet: FacetWithContext<C>)"]},{"name":"open override fun removeFacet(facet: FacetWithContext<C>)","description":"org.hexworks.amethyst.internal.accessor.DefaultFacetMutator.removeFacet","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-facet-mutator/remove-facet.html","searchKeys":["removeFacet","open override fun removeFacet(facet: FacetWithContext<C>)"]},{"name":"fun <T : EntityType, U : Context> newEntityOfType(type: T, init: EntityBuilder<T, U>.() -> Unit): Entity<T, U>","description":"org.hexworks.amethyst.api.newEntityOfType","location":"amethyst.core/org.hexworks.amethyst.api/new-entity-of-type.html","searchKeys":["newEntityOfType","fun <T : EntityType, U : Context> newEntityOfType(type: T, init: EntityBuilder<T, U>.() -> Unit): Entity<T, U>"]},{"name":"interface Actor<T : EntityType, C : Context, P : Message<C>> : Facet<C, P> , Behavior<C> ","description":"org.hexworks.amethyst.api.system.Actor","location":"amethyst.core/org.hexworks.amethyst.api.system/-actor/index.html","searchKeys":["Actor","interface Actor<T : EntityType, C : Context, P : Message<C>> : Facet<C, P> , Behavior<C> "]},{"name":"open infix fun and(other: Behavior<C>): Behavior<C>","description":"org.hexworks.amethyst.api.system.Behavior.and","location":"amethyst.core/org.hexworks.amethyst.api.system/-behavior/and.html","searchKeys":["and","open infix fun and(other: Behavior<C>): Behavior<C>"]},{"name":"open infix fun or(other: Behavior<C>): Behavior<C>","description":"org.hexworks.amethyst.api.system.Behavior.or","location":"amethyst.core/org.hexworks.amethyst.api.system/-behavior/or.html","searchKeys":["or","open infix fun or(other: Behavior<C>): Behavior<C>"]},{"name":"interface Facet<C : Context, M : Message<C>> : System<C> ","description":"org.hexworks.amethyst.api.system.Facet","location":"amethyst.core/org.hexworks.amethyst.api.system/-facet/index.html","searchKeys":["Facet","interface Facet<C : Context, M : Message<C>> : System<C> "]},{"name":"open fun compose(other: Facet<C, M>, commonAncestor: KClass<M>): Facet<C, M>","description":"org.hexworks.amethyst.api.system.Facet.compose","location":"amethyst.core/org.hexworks.amethyst.api.system/-facet/compose.html","searchKeys":["compose","open fun compose(other: Facet<C, M>, commonAncestor: KClass<M>): Facet<C, M>"]},{"name":"abstract suspend fun receive(message: M): Response","description":"org.hexworks.amethyst.api.system.Facet.receive","location":"amethyst.core/org.hexworks.amethyst.api.system/-facet/receive.html","searchKeys":["receive","abstract suspend fun receive(message: M): Response"]},{"name":"open suspend override fun receive(message: P): Response","description":"org.hexworks.amethyst.internal.system.CompositeFacet.receive","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-facet/receive.html","searchKeys":["receive","open suspend override fun receive(message: P): Response"]},{"name":"open suspend override fun receive(message: P): Response","description":"org.hexworks.amethyst.internal.system.StateMachineFacet.receive","location":"amethyst.core/org.hexworks.amethyst.internal.system/-state-machine-facet/receive.html","searchKeys":["receive","open suspend override fun receive(message: P): Response"]},{"name":"open suspend override fun receive(message: StateMachineSample.BarrierAction.Close): Response","description":"org.hexworks.amethyst.samples.StateMachineSample.Closeable.receive","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-closeable/receive.html","searchKeys":["receive","open suspend override fun receive(message: StateMachineSample.BarrierAction.Close): Response"]},{"name":"open suspend override fun receive(message: StateChanged<StateMachineSample.MyContext>): Response","description":"org.hexworks.amethyst.samples.StateMachineSample.InventoryHandler.receive","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-inventory-handler/receive.html","searchKeys":["receive","open suspend override fun receive(message: StateChanged<StateMachineSample.MyContext>): Response"]},{"name":"open suspend override fun receive(message: StateMachineSample.BarrierAction.Open): Response","description":"org.hexworks.amethyst.samples.StateMachineSample.Openable.receive","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-openable/receive.html","searchKeys":["receive","open suspend override fun receive(message: StateMachineSample.BarrierAction.Open): Response"]},{"name":"open suspend override fun receive(message: StateMachineSample.BarrierAction.Unlock): Response","description":"org.hexworks.amethyst.samples.StateMachineSample.Unlockable.receive","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-unlockable/receive.html","searchKeys":["receive","open suspend override fun receive(message: StateMachineSample.BarrierAction.Unlock): Response"]},{"name":"open suspend override fun receive(message: TestMessage): Response","description":"stress.TestFacet.receive","location":"amethyst.core/stress/-test-facet/receive.html","searchKeys":["receive","open suspend override fun receive(message: TestMessage): Response"]},{"name":"interface StateFacet<C : Context, M : Message<C>> : Facet<C, M> ","description":"org.hexworks.amethyst.api.system.StateFacet","location":"amethyst.core/org.hexworks.amethyst.api.system/-state-facet/index.html","searchKeys":["StateFacet","interface StateFacet<C : Context, M : Message<C>> : Facet<C, M> "]},{"name":"open suspend fun onEnter(message: M)","description":"org.hexworks.amethyst.api.system.StateFacet.onEnter","location":"amethyst.core/org.hexworks.amethyst.api.system/-state-facet/on-enter.html","searchKeys":["onEnter","open suspend fun onEnter(message: M)"]},{"name":"open suspend override fun onEnter(message: StateMachineSample.BarrierAction.Close)","description":"org.hexworks.amethyst.samples.StateMachineSample.Closeable.onEnter","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-closeable/on-enter.html","searchKeys":["onEnter","open suspend override fun onEnter(message: StateMachineSample.BarrierAction.Close)"]},{"name":"open suspend override fun onEnter(message: StateMachineSample.BarrierAction.Open)","description":"org.hexworks.amethyst.samples.StateMachineSample.Openable.onEnter","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-openable/on-enter.html","searchKeys":["onEnter","open suspend override fun onEnter(message: StateMachineSample.BarrierAction.Open)"]},{"name":"open suspend override fun onEnter(message: StateMachineSample.BarrierAction.Unlock)","description":"org.hexworks.amethyst.samples.StateMachineSample.Unlockable.onEnter","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-unlockable/on-enter.html","searchKeys":["onEnter","open suspend override fun onEnter(message: StateMachineSample.BarrierAction.Unlock)"]},{"name":"open suspend fun onExit(message: M)","description":"org.hexworks.amethyst.api.system.StateFacet.onExit","location":"amethyst.core/org.hexworks.amethyst.api.system/-state-facet/on-exit.html","searchKeys":["onExit","open suspend fun onExit(message: M)"]},{"name":"interface System<C : Context>","description":"org.hexworks.amethyst.api.system.System","location":"amethyst.core/org.hexworks.amethyst.api.system/-system/index.html","searchKeys":["System","interface System<C : Context>"]},{"name":"class RealTimeEngine<T : Context>(coroutineContext: CoroutineContext) : Engine<T> , CoroutineScope","description":"org.hexworks.amethyst.internal.RealTimeEngine","location":"amethyst.core/org.hexworks.amethyst.internal/-real-time-engine/index.html","searchKeys":["RealTimeEngine","class RealTimeEngine<T : Context>(coroutineContext: CoroutineContext) : Engine<T> , CoroutineScope"]},{"name":"fun RealTimeEngine(coroutineContext: CoroutineContext = Dispatchers.Default)","description":"org.hexworks.amethyst.internal.RealTimeEngine.RealTimeEngine","location":"amethyst.core/org.hexworks.amethyst.internal/-real-time-engine/-real-time-engine.html","searchKeys":["RealTimeEngine","fun RealTimeEngine(coroutineContext: CoroutineContext = Dispatchers.Default)"]},{"name":"class TurnBasedEngine<T : Context>(coroutineContext: CoroutineContext) : Engine<T> , CoroutineScope","description":"org.hexworks.amethyst.internal.TurnBasedEngine","location":"amethyst.core/org.hexworks.amethyst.internal/-turn-based-engine/index.html","searchKeys":["TurnBasedEngine","class TurnBasedEngine<T : Context>(coroutineContext: CoroutineContext) : Engine<T> , CoroutineScope"]},{"name":"fun TurnBasedEngine(coroutineContext: CoroutineContext)","description":"org.hexworks.amethyst.internal.TurnBasedEngine.TurnBasedEngine","location":"amethyst.core/org.hexworks.amethyst.internal/-turn-based-engine/-turn-based-engine.html","searchKeys":["TurnBasedEngine","fun TurnBasedEngine(coroutineContext: CoroutineContext)"]},{"name":"fun executeTurn(context: T): Job","description":"org.hexworks.amethyst.internal.TurnBasedEngine.executeTurn","location":"amethyst.core/org.hexworks.amethyst.internal/-turn-based-engine/execute-turn.html","searchKeys":["executeTurn","fun executeTurn(context: T): Job"]},{"name":"class DefaultAttributeMutator(attributes: Set<Attribute>) : AttributeMutator","description":"org.hexworks.amethyst.internal.accessor.DefaultAttributeMutator","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-attribute-mutator/index.html","searchKeys":["DefaultAttributeMutator","class DefaultAttributeMutator(attributes: Set<Attribute>) : AttributeMutator"]},{"name":"fun DefaultAttributeMutator(attributes: Set<Attribute>)","description":"org.hexworks.amethyst.internal.accessor.DefaultAttributeMutator.DefaultAttributeMutator","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-attribute-mutator/-default-attribute-mutator.html","searchKeys":["DefaultAttributeMutator","fun DefaultAttributeMutator(attributes: Set<Attribute>)"]},{"name":"class DefaultBehaviorMutator<C : Context>(behaviors: Set<Behavior<C>>) : BehaviorMutator<C> ","description":"org.hexworks.amethyst.internal.accessor.DefaultBehaviorMutator","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-behavior-mutator/index.html","searchKeys":["DefaultBehaviorMutator","class DefaultBehaviorMutator<C : Context>(behaviors: Set<Behavior<C>>) : BehaviorMutator<C> "]},{"name":"fun <C : Context> DefaultBehaviorMutator(behaviors: Set<Behavior<C>>)","description":"org.hexworks.amethyst.internal.accessor.DefaultBehaviorMutator.DefaultBehaviorMutator","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-behavior-mutator/-default-behavior-mutator.html","searchKeys":["DefaultBehaviorMutator","fun <C : Context> DefaultBehaviorMutator(behaviors: Set<Behavior<C>>)"]},{"name":"class DefaultFacetMutator<C : Context>(facets: Set<FacetWithContext<C>>) : FacetMutator<C> ","description":"org.hexworks.amethyst.internal.accessor.DefaultFacetMutator","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-facet-mutator/index.html","searchKeys":["DefaultFacetMutator","class DefaultFacetMutator<C : Context>(facets: Set<FacetWithContext<C>>) : FacetMutator<C> "]},{"name":"fun DefaultFacetMutator(facets: Set<FacetWithContext<C>>)","description":"org.hexworks.amethyst.internal.accessor.DefaultFacetMutator.DefaultFacetMutator","location":"amethyst.core/org.hexworks.amethyst.internal.accessor/-default-facet-mutator/-default-facet-mutator.html","searchKeys":["DefaultFacetMutator","fun DefaultFacetMutator(facets: Set<FacetWithContext<C>>)"]},{"name":"class DefaultEntity<T : EntityType, C : Context>(type: T, attributes: Set<Attribute>, facets: Set<FacetWithContext<C>>, behaviors: Set<Behavior<C>>) : BaseEntity<T, C> ","description":"org.hexworks.amethyst.internal.entity.DefaultEntity","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/index.html","searchKeys":["DefaultEntity","class DefaultEntity<T : EntityType, C : Context>(type: T, attributes: Set<Attribute>, facets: Set<FacetWithContext<C>>, behaviors: Set<Behavior<C>>) : BaseEntity<T, C> "]},{"name":"fun <T : EntityType, C : Context> DefaultEntity(type: T, attributes: Set<Attribute> = setOf(), facets: Set<FacetWithContext<C>> = setOf(), behaviors: Set<Behavior<C>> = setOf())","description":"org.hexworks.amethyst.internal.entity.DefaultEntity.DefaultEntity","location":"amethyst.core/org.hexworks.amethyst.internal.entity/-default-entity/-default-entity.html","searchKeys":["DefaultEntity","fun <T : EntityType, C : Context> DefaultEntity(type: T, attributes: Set<Attribute> = setOf(), facets: Set<FacetWithContext<C>> = setOf(), behaviors: Set<Behavior<C>> = setOf())"]},{"name":"class CompositeAndBehavior<C : Context>(first: Behavior<C>, second: Behavior<C>) : BaseBehavior<C> ","description":"org.hexworks.amethyst.internal.system.CompositeAndBehavior","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-and-behavior/index.html","searchKeys":["CompositeAndBehavior","class CompositeAndBehavior<C : Context>(first: Behavior<C>, second: Behavior<C>) : BaseBehavior<C> "]},{"name":"fun <C : Context> CompositeAndBehavior(first: Behavior<C>, second: Behavior<C>)","description":"org.hexworks.amethyst.internal.system.CompositeAndBehavior.CompositeAndBehavior","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-and-behavior/-composite-and-behavior.html","searchKeys":["CompositeAndBehavior","fun <C : Context> CompositeAndBehavior(first: Behavior<C>, second: Behavior<C>)"]},{"name":"class CompositeFacet<C : Context, P : Message<C>>(children: Set<Facet<C, P>>, messageType: KClass<P>, id: UUID, mandatoryAttributes: Set<KClass<out Attribute>>) : Facet<C, P> ","description":"org.hexworks.amethyst.internal.system.CompositeFacet","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-facet/index.html","searchKeys":["CompositeFacet","class CompositeFacet<C : Context, P : Message<C>>(children: Set<Facet<C, P>>, messageType: KClass<P>, id: UUID, mandatoryAttributes: Set<KClass<out Attribute>>) : Facet<C, P> "]},{"name":"fun <C : Context, P : Message<C>> CompositeFacet(children: Set<Facet<C, P>>, messageType: KClass<P>, id: UUID = UUID.randomUUID(), mandatoryAttributes: Set<KClass<out Attribute>> = children.flatMap {\n            it.mandatoryAttributes\n        }.toSet())","description":"org.hexworks.amethyst.internal.system.CompositeFacet.CompositeFacet","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-facet/-composite-facet.html","searchKeys":["CompositeFacet","fun <C : Context, P : Message<C>> CompositeFacet(children: Set<Facet<C, P>>, messageType: KClass<P>, id: UUID = UUID.randomUUID(), mandatoryAttributes: Set<KClass<out Attribute>> = children.flatMap {\n            it.mandatoryAttributes\n        }.toSet())"]},{"name":"class CompositeOrBehavior<C : Context>(first: Behavior<C>, second: Behavior<C>) : BaseBehavior<C> ","description":"org.hexworks.amethyst.internal.system.CompositeOrBehavior","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-or-behavior/index.html","searchKeys":["CompositeOrBehavior","class CompositeOrBehavior<C : Context>(first: Behavior<C>, second: Behavior<C>) : BaseBehavior<C> "]},{"name":"fun <C : Context> CompositeOrBehavior(first: Behavior<C>, second: Behavior<C>)","description":"org.hexworks.amethyst.internal.system.CompositeOrBehavior.CompositeOrBehavior","location":"amethyst.core/org.hexworks.amethyst.internal.system/-composite-or-behavior/-composite-or-behavior.html","searchKeys":["CompositeOrBehavior","fun <C : Context> CompositeOrBehavior(first: Behavior<C>, second: Behavior<C>)"]},{"name":"class StateMachineFacet<C : Context, P : Message<C>>(messageType: KClass<P>, initialState: Facet<C, out P>) : Facet<C, P> ","description":"org.hexworks.amethyst.internal.system.StateMachineFacet","location":"amethyst.core/org.hexworks.amethyst.internal.system/-state-machine-facet/index.html","searchKeys":["StateMachineFacet","class StateMachineFacet<C : Context, P : Message<C>>(messageType: KClass<P>, initialState: Facet<C, out P>) : Facet<C, P> "]},{"name":"fun <C : Context, P : Message<C>> StateMachineFacet(messageType: KClass<P>, initialState: Facet<C, out P>)","description":"org.hexworks.amethyst.internal.system.StateMachineFacet.StateMachineFacet","location":"amethyst.core/org.hexworks.amethyst.internal.system/-state-machine-facet/-state-machine-facet.html","searchKeys":["StateMachineFacet","fun <C : Context, P : Message<C>> StateMachineFacet(messageType: KClass<P>, initialState: Facet<C, out P>)"]},{"name":"var currentState: Facet<C, out P>","description":"org.hexworks.amethyst.internal.system.StateMachineFacet.currentState","location":"amethyst.core/org.hexworks.amethyst.internal.system/-state-machine-facet/current-state.html","searchKeys":["currentState","var currentState: Facet<C, out P>"]},{"name":"fun <T : Any> runTest(context: CoroutineContext = GlobalScope.coroutineContext, block: suspend () -> T)","description":"org.hexworks.amethyst.platform.runTest","location":"amethyst.core/org.hexworks.amethyst.platform/run-test.html","searchKeys":["runTest","fun <T : Any> runTest(context: CoroutineContext = GlobalScope.coroutineContext, block: suspend () -> T)"]},{"name":"class StateMachineSample","description":"org.hexworks.amethyst.samples.StateMachineSample","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/index.html","searchKeys":["StateMachineSample","class StateMachineSample"]},{"name":"fun StateMachineSample()","description":"org.hexworks.amethyst.samples.StateMachineSample.StateMachineSample","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-state-machine-sample.html","searchKeys":["StateMachineSample","fun StateMachineSample()"]},{"name":"sealed class BarrierAction : Message<StateMachineSample.MyContext> ","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/index.html","searchKeys":["BarrierAction","sealed class BarrierAction : Message<StateMachineSample.MyContext> "]},{"name":"data class Close(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>) : StateMachineSample.BarrierAction","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Close","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-close/index.html","searchKeys":["Close","data class Close(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>) : StateMachineSample.BarrierAction"]},{"name":"fun Close(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>)","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Close.Close","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-close/-close.html","searchKeys":["Close","fun Close(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>)"]},{"name":"data class Open(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>) : StateMachineSample.BarrierAction","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Open","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-open/index.html","searchKeys":["Open","data class Open(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>) : StateMachineSample.BarrierAction"]},{"name":"fun Open(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>)","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Open.Open","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-open/-open.html","searchKeys":["Open","fun Open(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>)"]},{"name":"data class Unlock(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>) : StateMachineSample.BarrierAction","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Unlock","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-unlock/index.html","searchKeys":["Unlock","data class Unlock(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>) : StateMachineSample.BarrierAction"]},{"name":"fun Unlock(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>)","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierAction.Unlock.Unlock","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-action/-unlock/-unlock.html","searchKeys":["Unlock","fun Unlock(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>)"]},{"name":"sealed class BarrierStateChange : Message<StateMachineSample.MyContext> ","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/index.html","searchKeys":["BarrierStateChange","sealed class BarrierStateChange : Message<StateMachineSample.MyContext> "]},{"name":"data class Closed(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>) : StateMachineSample.BarrierStateChange","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Closed","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-closed/index.html","searchKeys":["Closed","data class Closed(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>) : StateMachineSample.BarrierStateChange"]},{"name":"fun Closed(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>)","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Closed.Closed","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-closed/-closed.html","searchKeys":["Closed","fun Closed(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>)"]},{"name":"data class Opened(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>) : StateMachineSample.BarrierStateChange","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Opened","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-opened/index.html","searchKeys":["Opened","data class Opened(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>) : StateMachineSample.BarrierStateChange"]},{"name":"fun Opened(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>)","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Opened.Opened","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-opened/-opened.html","searchKeys":["Opened","fun Opened(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>)"]},{"name":"data class Unlocked(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>) : StateMachineSample.BarrierStateChange","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Unlocked","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-unlocked/index.html","searchKeys":["Unlocked","data class Unlocked(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>) : StateMachineSample.BarrierStateChange"]},{"name":"fun Unlocked(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>)","description":"org.hexworks.amethyst.samples.StateMachineSample.BarrierStateChange.Unlocked.Unlocked","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-barrier-state-change/-unlocked/-unlocked.html","searchKeys":["Unlocked","fun Unlocked(context: StateMachineSample.MyContext, source: Entity<out EntityType, StateMachineSample.MyContext>)"]},{"name":"object Closeable : BaseStateFacet<StateMachineSample.MyContext, StateMachineSample.BarrierAction.Close> ","description":"org.hexworks.amethyst.samples.StateMachineSample.Closeable","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-closeable/index.html","searchKeys":["Closeable","object Closeable : BaseStateFacet<StateMachineSample.MyContext, StateMachineSample.BarrierAction.Close> "]},{"name":"data class HiddenInventory(items: Set<String>) : BaseAttribute","description":"org.hexworks.amethyst.samples.StateMachineSample.HiddenInventory","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-hidden-inventory/index.html","searchKeys":["HiddenInventory","data class HiddenInventory(items: Set<String>) : BaseAttribute"]},{"name":"fun HiddenInventory(items: Set<String>)","description":"org.hexworks.amethyst.samples.StateMachineSample.HiddenInventory.HiddenInventory","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-hidden-inventory/-hidden-inventory.html","searchKeys":["HiddenInventory","fun HiddenInventory(items: Set<String>)"]},{"name":"val items: Set<String>","description":"org.hexworks.amethyst.samples.StateMachineSample.HiddenInventory.items","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-hidden-inventory/items.html","searchKeys":["items","val items: Set<String>"]},{"name":"val items: Set<String>","description":"org.hexworks.amethyst.samples.StateMachineSample.Inventory.items","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-inventory/items.html","searchKeys":["items","val items: Set<String>"]},{"name":"data class Inventory(items: Set<String>) : BaseAttribute","description":"org.hexworks.amethyst.samples.StateMachineSample.Inventory","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-inventory/index.html","searchKeys":["Inventory","data class Inventory(items: Set<String>) : BaseAttribute"]},{"name":"fun Inventory(items: Set<String>)","description":"org.hexworks.amethyst.samples.StateMachineSample.Inventory.Inventory","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-inventory/-inventory.html","searchKeys":["Inventory","fun Inventory(items: Set<String>)"]},{"name":"object InventoryHandler : BaseFacet<StateMachineSample.MyContext, StateChanged<StateMachineSample.MyContext>> ","description":"org.hexworks.amethyst.samples.StateMachineSample.InventoryHandler","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-inventory-handler/index.html","searchKeys":["InventoryHandler","object InventoryHandler : BaseFacet<StateMachineSample.MyContext, StateChanged<StateMachineSample.MyContext>> "]},{"name":"object MyContext : Context","description":"org.hexworks.amethyst.samples.StateMachineSample.MyContext","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-my-context/index.html","searchKeys":["MyContext","object MyContext : Context"]},{"name":"object MyType : EntityType","description":"org.hexworks.amethyst.samples.StateMachineSample.MyType","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-my-type/index.html","searchKeys":["MyType","object MyType : EntityType"]},{"name":"object Openable : BaseStateFacet<StateMachineSample.MyContext, StateMachineSample.BarrierAction.Open> ","description":"org.hexworks.amethyst.samples.StateMachineSample.Openable","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-openable/index.html","searchKeys":["Openable","object Openable : BaseStateFacet<StateMachineSample.MyContext, StateMachineSample.BarrierAction.Open> "]},{"name":"object Unlockable : BaseStateFacet<StateMachineSample.MyContext, StateMachineSample.BarrierAction.Unlock> ","description":"org.hexworks.amethyst.samples.StateMachineSample.Unlockable","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/-unlockable/index.html","searchKeys":["Unlockable","object Unlockable : BaseStateFacet<StateMachineSample.MyContext, StateMachineSample.BarrierAction.Unlock> "]},{"name":"fun runExample()","description":"org.hexworks.amethyst.samples.StateMachineSample.runExample","location":"amethyst.core/org.hexworks.amethyst.samples/-state-machine-sample/run-example.html","searchKeys":["runExample","fun runExample()"]},{"name":"fun processor(attributes: Set<Attribute>, fn: suspend (ProcessorContext) -> Boolean): Entity<ProcessorContext, Processor>","description":"processor","location":"amethyst.core/[root]/processor.html","searchKeys":["processor","fun processor(attributes: Set<Attribute>, fn: suspend (ProcessorContext) -> Boolean): Entity<ProcessorContext, Processor>"]},{"name":"object EngineStressTest","description":"stress.EngineStressTest","location":"amethyst.core/stress/-engine-stress-test/index.html","searchKeys":["EngineStressTest","object EngineStressTest"]},{"name":"class WaitingBehavior<C : Context>(waitMs: Long) : Behavior<C> ","description":"stress.EngineStressTest.WaitingBehavior","location":"amethyst.core/stress/-engine-stress-test/-waiting-behavior/index.html","searchKeys":["WaitingBehavior","class WaitingBehavior<C : Context>(waitMs: Long) : Behavior<C> "]},{"name":"fun WaitingBehavior(waitMs: Long)","description":"stress.EngineStressTest.WaitingBehavior.WaitingBehavior","location":"amethyst.core/stress/-engine-stress-test/-waiting-behavior/-waiting-behavior.html","searchKeys":["WaitingBehavior","fun WaitingBehavior(waitMs: Long)"]},{"name":"fun runLongWorkingEntitiesTest()","description":"stress.EngineStressTest.runLongWorkingEntitiesTest","location":"amethyst.core/stress/-engine-stress-test/run-long-working-entities-test.html","searchKeys":["runLongWorkingEntitiesTest","fun runLongWorkingEntitiesTest()"]},{"name":"fun runManyEntitiesTest()","description":"stress.EngineStressTest.runManyEntitiesTest","location":"amethyst.core/stress/-engine-stress-test/run-many-entities-test.html","searchKeys":["runManyEntitiesTest","fun runManyEntitiesTest()"]},{"name":"data class TestAttribute(name: String, age: Int) : BaseAttribute","description":"stress.TestAttribute","location":"amethyst.core/stress/-test-attribute/index.html","searchKeys":["TestAttribute","data class TestAttribute(name: String, age: Int) : BaseAttribute"]},{"name":"fun TestAttribute(name: String, age: Int)","description":"stress.TestAttribute.TestAttribute","location":"amethyst.core/stress/-test-attribute/-test-attribute.html","searchKeys":["TestAttribute","fun TestAttribute(name: String, age: Int)"]},{"name":"val age: Int","description":"stress.TestAttribute.age","location":"amethyst.core/stress/-test-attribute/age.html","searchKeys":["age","val age: Int"]},{"name":"object TestBehavior : BaseBehavior<TestContext> ","description":"stress.TestBehavior","location":"amethyst.core/stress/-test-behavior/index.html","searchKeys":["TestBehavior","object TestBehavior : BaseBehavior<TestContext> "]},{"name":"object TestContext : Context","description":"stress.TestContext","location":"amethyst.core/stress/-test-context/index.html","searchKeys":["TestContext","object TestContext : Context"]},{"name":"object TestEntityType : EntityType","description":"stress.TestEntityType","location":"amethyst.core/stress/-test-entity-type/index.html","searchKeys":["TestEntityType","object TestEntityType : EntityType"]},{"name":"object TestFacet : BaseFacet<TestContext, TestMessage> ","description":"stress.TestFacet","location":"amethyst.core/stress/-test-facet/index.html","searchKeys":["TestFacet","object TestFacet : BaseFacet<TestContext, TestMessage> "]},{"name":"class TestMessage(context: TestContext, source: Entity<TestEntityType, TestContext>) : Message<TestContext> ","description":"stress.TestMessage","location":"amethyst.core/stress/-test-message/index.html","searchKeys":["TestMessage","class TestMessage(context: TestContext, source: Entity<TestEntityType, TestContext>) : Message<TestContext> "]},{"name":"fun TestMessage(context: TestContext, source: Entity<TestEntityType, TestContext>)","description":"stress.TestMessage.TestMessage","location":"amethyst.core/stress/-test-message/-test-message.html","searchKeys":["TestMessage","fun TestMessage(context: TestContext, source: Entity<TestEntityType, TestContext>)"]}]
